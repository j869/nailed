<%- include('partials/header', { user: locals.user }) %>

<div style="margin-top: 100px; padding: 20px;">
  <div class="container-fluid">
    
    <div class="row mb-4">
      <div class="col-12">
        <h2 class="mb-3">WF Rule Report</h2>
        <p class="text-muted">Workflow rules analysis - Jobs grouped by template with change_array details</p>
        
        <!-- Tab Navigation -->
        <ul class="nav nav-tabs" id="reportTabs" role="tablist">
          <li class="nav-item" role="presentation">
            <button class="nav-link active" id="grouped-tab" data-bs-toggle="tab" data-bs-target="#grouped" type="button" role="tab">Grouped by Template</button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="individual-tab" data-bs-toggle="tab" data-bs-target="#individual" type="button" role="tab">Grouped by Rule</button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="alljobs-tab" data-bs-toggle="tab" data-bs-target="#alljobs" type="button" role="tab">All Jobs</button>
          </li>
        </ul>
      </div>
    </div>

    <!-- Tab Content -->
    <div class="tab-content" id="reportTabsContent">
      
      <!-- Grouped by Template Tab -->
      <div class="tab-pane fade show active" id="grouped" role="tabpanel">
        <div class="row">
          <div class="col-12">
            <div class="card">
              <div class="card-header">
                <h5>Workflow Rules by Template</h5>
                <small class="text-muted">Jobs grouped by job_template_id with change_array analysis</small>
              </div>
              <div class="card-body">
                <div class="table-responsive">
                  <table class="table table-striped table-hover">
                    <thead class="table-dark">
                      <tr>
                        <th>Job Template ID</th>
                        <th>Template Name</th>
                        <th>Job Count</th>
                        <th>Jobs Sort Order</th>
                        <th>Job Names</th>
                        <th>Product IDs</th>
                        <th>Change Array</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% if (jobs && jobs.length > 0) { %>
                        <% jobs.forEach(template => { %>
                          <tr>
                            <td>
                              <span class="badge bg-primary fs-6"><%= template.job_template_id %></span>
                            </td>
                            <td>
                              <div class="small fw-bold">
                                <%= template.template_name || 'Unknown Template' %>
                              </div>
                            </td>
                            <td>
                              <span class="badge bg-success"><%= template.job_count %></span>
                            </td>
                            <td>
                              <div class="small">
                                <% if (template.sort_orders && template.sort_orders.length > 0) { %>
                                  <% const uniqueSortOrders = [...new Set(template.sort_orders.filter(order => order !== null && order !== undefined))]; %>
                                  <%= uniqueSortOrders.join(', ') %>
                                <% } else { %>
                                  <em>None</em>
                                <% } %>
                              </div>
                            </td>
                            <td>
                              <div class="small">
                                <% if (template.job_names && template.job_names.length > 0) { %>
                                  <% const uniqueNames = [...new Set(template.job_names.filter(name => name))]; %>
                                  <% uniqueNames.forEach((name, index) => { %>
                                    <div><%= name || 'Unnamed' %></div>
                                  <% }); %>
                                <% } else { %>
                                  <em>None</em>
                                <% } %>
                              </div>
                            </td>
                            <td>
                              <div class="small">
                                <% if (template.product_ids && template.product_ids.length > 0) { %>
                                  <% const uniqueProducts = [...new Set(template.product_ids.filter(id => id))]; %>
                                  <%= uniqueProducts.join(', ') %>
                                <% } else { %>
                                  <em>None</em>
                                <% } %>
                              </div>
                            </td>
                            <td>
                              <div class="workflow-patterns-cell">
                                <% if (template.patterns && template.patterns.length > 0) { %>
                                  <% template.patterns.forEach((patternGroup, index) => { %>
                                    <div class="mb-2">
                                      <%= patternGroup.example %>
                                      <button class="btn btn-sm btn-outline-primary update-btn" 
                                              data-template-id="<%= template.job_template_id %>"
                                              data-change-array="<%= encodeURIComponent(patternGroup.example) %>"
                                              data-job-ids="<%= patternGroup.job_ids.join(',') %>">
                                        Update
                                      </button>
                                    </div>
                                  <% }); %>
                                <% } else { %>
                                  <span class="badge bg-secondary">No Patterns</span>
                                <% } %>
                              </div>
                            </td>
                          </tr>
                        <% }); %>
                      <% } else { %>
                        <tr>
                          <td colspan="7" class="text-center text-muted">
                            No workflow rules found in the database.
                          </td>
                        </tr>
                      <% } %>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Grouped by Rule Tab -->
      <div class="tab-pane fade" id="individual" role="tabpanel">
        <div class="row">
          <div class="col-12">
            <div class="card">
              <div class="card-header">
                <h5>Workflow Rules Grouped by Pattern</h5>
                <small class="text-muted">All jobs grouped by change_array pattern across templates - update all matching rules at once</small>
              </div>
              <div class="card-body">
                <div class="table-responsive">
                  <table class="table table-striped table-hover">
                    <thead class="table-dark">
                      <tr>
                        <th>Pattern</th>
                        <th>Job Count</th>
                        <th>Templates Used</th>
                        <th>Job IDs</th>
                        <th>Change Array</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% if (ruleGroups && ruleGroups.length > 0) { %>
                        <% ruleGroups.forEach(ruleGroup => { %>
                          <tr>
                            <td>
                              <span class="badge bg-secondary">Pattern <%= ruleGroup.pattern_id %></span>
                            </td>
                            <td>
                              <span class="badge bg-success"><%= ruleGroup.job_count %></span>
                            </td>
                            <td>
                              <div class="small">
                                <% const uniqueTemplates = [...new Set(ruleGroup.template_ids.filter(id => id))]; %>
                                <%= uniqueTemplates.join(', ') %>
                              </div>
                            </td>
                            <td>
                              <div class="small">
                                <%= ruleGroup.job_ids.slice(0, 10).join(', ') %><% if (ruleGroup.job_ids.length > 10) { %>...<% } %>
                              </div>
                            </td>
                            <td>
                              <div class="workflow-patterns-cell">
                                <div class="mb-2">
                                  <%= ruleGroup.change_array %>
                                  <button class="btn btn-sm btn-outline-primary update-btn" 
                                          data-template-id=""
                                          data-template-ids="<%= [...new Set(ruleGroup.template_ids.filter(id => id))].join(',') %>"
                                          data-change-array="<%= encodeURIComponent(ruleGroup.change_array) %>"
                                          data-job-ids="<%= ruleGroup.job_ids.join(',') %>">
                                    Update All
                                  </button>
                                </div>
                              </div>
                            </td>
                          </tr>
                        <% }); %>
                      <% } else { %>
                        <tr>
                          <td colspan="5" class="text-center text-muted">
                            No rule patterns found in the database.
                          </td>
                        </tr>
                      <% } %>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- All Jobs Ungrouped -->
      <div class="tab-pane fade" id="alljobs" role="tabpanel">
        <div class="row mb-3">
          <div class="col-md-3">
            <input type="text" class="form-control" id="filterJobId" placeholder="Job ID">
          </div>
          <div class="col-md-3">
            <input type="text" class="form-control" id="filterProductId" placeholder="Product ID">
          </div>
          <div class="col-md-3">
            <input type="text" class="form-control" id="filterSortOrder" placeholder="Sort Order">
          </div>
          <div class="col-md-3">
            <input type="text" class="form-control" id="filterDisplayText" placeholder="Display Text">
          </div>
        </div>
        <div class="row mb-3">
          <div class="col-md-12 text-end">
            <button class="btn btn-primary" id="filterJobsBtn">Filter</button>
            <button class="btn btn-danger" id="updateAllFilteredBtn">Update All Filtered</button>
          </div>
        </div>
        <div class="table-responsive">
          <table class="table table-striped table-hover">
            <thead class="table-dark">
              <tr>
                <th>ID</th>
                <th>Template ID</th>
                <th>Product ID</th>
                <th>Sort Order</th>
                <th>Display Text</th>
                <th>Change Array</th>
              </tr>
            </thead>
            <tbody id="allJobsBody">
              <% if (individualJobs && individualJobs.length > 0) { %>
                <% individualJobs.forEach(job => { %>
                  <tr>
                    <td><%= job.job_id %></td>
                    <td><%= job.job_template_id %></td>
                    <td><%= job.product_id || '' %></td>
                    <td><%= job.sort_order || '' %></td>
                    <td><%= job.job_name || '' %></td>
                    <td>
                      <%= job.change_array || '' %>
                        <button class="btn btn-sm btn-outline-primary update-btn"
                          data-template-id="<%= job.job_template_id %>"
                          data-template-ids="<%= job.job_template_id %>"
                          data-change-array="<%= encodeURIComponent(job.change_array || '') %>"
                          data-job-ids="<%= job.job_id %>">
                          Update
                        </button>
                    </td>
                  </tr>
                <% }); %>
              <% } else { %>
                <tr>
                  <td colspan="6" class="text-center text-muted">No jobs found.</td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>

    </div>

  </div>
</div>

<!-- Update Change Array Modal -->
<div class="modal fade" id="updateChangeArrayModal" tabindex="-1" aria-labelledby="updateChangeArrayModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="updateChangeArrayModalLabel">Update Change Array</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="updateChangeArrayForm">
          <div class="mb-3">
            <label for="templateId" class="form-label">Job Template ID</label>
            <input type="text" class="form-control" id="templateId" readonly>
          </div>
          <div class="mb-3">
            <label for="affectedJobs" class="form-label">Affected Job IDs</label>
            <input type="text" class="form-control" id="affectedJobs" readonly>
          </div>
          <div class="mb-3">
            <label for="templateName" class="form-label">Display Text</label>
            <input type="text" class="form-control" id="templateName" placeholder="Edit display text...">
          </div>
          <div class="mb-3">
            <label for="newChangeArray" class="form-label">New Change Array</label>
            <textarea class="form-control" id="newChangeArray" rows="4" required style="font-family: monospace;" placeholder="Enter new change array value..."></textarea>
          </div>
          <div class="mb-3">
            <label class="form-label">Update Condition</label>
            <div class="form-control" style="background-color: #f8f9fa; font-family: monospace;" id="updateCondition"></div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="confirmUpdate">Update Records</button>
      </div>
    </div>
  </div>
</div>

<!-- Success Modal -->
<div class="modal fade" id="updateResultModal" tabindex="-1" aria-labelledby="updateResultModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="updateResultModalLabel">Update Result</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="updateResultMessage"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" onclick="location.reload()">Close</button>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Handle update button clicks
  document.querySelectorAll('.update-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const templateId = this.dataset.templateId;
      const templateIds = this.dataset.templateIds;
      const changeArray = decodeURIComponent(this.dataset.changeArray);
      const jobIds = this.dataset.jobIds;
      
      // Determine which template IDs to use
      let effectiveTemplateIds = templateId ? templateId : templateIds;
      
      // Populate modal
      document.getElementById('templateId').value = effectiveTemplateIds;
      document.getElementById('affectedJobs').value = jobIds;
      // document.getElementById('currentChangeArray').value = changeArray;
      document.getElementById('newChangeArray').value = changeArray;
      // Set template name if available
      const templateName = this.closest('tr').querySelector('.fw-bold')?.textContent?.trim() || '';
      document.getElementById('templateName').value = templateName;

      // Generate appropriate WHERE condition
      let whereCondition;
      if (templateId) {
        // Single template update - use both template_id and job IDs for safety
        whereCondition = `WHERE job_template_id = ${templateId} AND id IN (${jobIds})`;
      } else if (templateIds) {
        // Multiple template update - job IDs already filtered by template, so template condition is redundant
        // Using job IDs only is more efficient and avoids duplicate template ID issues
        whereCondition = `WHERE id IN (${jobIds})`;
      } else {
        // Fallback to job IDs only
        whereCondition = `WHERE id IN (${jobIds})`;
      }

      document.getElementById('updateCondition').textContent = whereCondition;

      // Show modal
      new bootstrap.Modal(document.getElementById('updateChangeArrayModal')).show();
    });
  });
  
  // Handle update confirmation
  document.getElementById('confirmUpdate').addEventListener('click', function() {
    const templateIds = document.getElementById('templateId').value; // Can be single ID or comma-separated IDs
    const jobIds = document.getElementById('affectedJobs').value.split(',');
    const newChangeArray = document.getElementById('newChangeArray').value;
    const newTemplateName = document.getElementById('templateName').value;

    if (!newChangeArray.trim()) {
      alert('Please enter a new change array value');
      return;
    }

    // Disable button during request
    this.disabled = true;
    this.textContent = 'Updating...';

    // Debug logging
    console.log('Update request:', {
      templateIds: templateIds,
      jobIdsCount: jobIds.length,
      newTemplateName: newTemplateName,
      payloadSize: JSON.stringify({
        templateIds: templateIds,
        jobIds: jobIds,
        newChangeArray: newChangeArray,
        newTemplateName: newTemplateName
      }).length
    });

    // Send update request
    fetch('/admin/wf-rule-report/update', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        templateIds: templateIds, // Changed from templateId to templateIds
        jobIds: jobIds,
        newChangeArray: newChangeArray,
        newTemplateName: newTemplateName
      })
    })
    .then(response => response.json())
    .then(data => {
      // Hide update modal
      bootstrap.Modal.getInstance(document.getElementById('updateChangeArrayModal')).hide();
      
      // Show result modal
      if (data.success) {
        const templateDisplay = templateIds.includes(',') ? `Template IDs: ${templateIds}` : `Template ID: ${templateIds}`;
        document.getElementById('updateResultMessage').innerHTML = 
          `<div class="alert alert-success">
            <i class="bi bi-check-circle"></i>
            Successfully updated <strong>${data.updatedCount}</strong> record(s) for ${templateDisplay}.
          </div>`;
      } else {
        document.getElementById('updateResultMessage').innerHTML = 
          `<div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle"></i>
            Error updating records: ${data.error}
          </div>`;
      }
      
      new bootstrap.Modal(document.getElementById('updateResultModal')).show();
    })
    .catch(error => {
      console.error('Update request failed:', {
        error: error,
        templateIds: templateIds,
        jobIdsCount: jobIds.length,
        errorType: error.name,
        errorMessage: error.message
      });
      
      let errorMessage = 'Network error occurred while updating records.';
      if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
        errorMessage += ' This may be due to request size limits.';
      }
      
      document.getElementById('updateResultMessage').innerHTML = 
        `<div class="alert alert-danger">
          <i class="bi bi-exclamation-triangle"></i>
          ${errorMessage}
        </div>`;
      
      bootstrap.Modal.getInstance(document.getElementById('updateChangeArrayModal')).hide();
      new bootstrap.Modal(document.getElementById('updateResultModal')).show();
    })
    .finally(() => {
      // Re-enable button
      this.disabled = false;
      this.textContent = 'Update Records';
    });
  });
});

document.addEventListener('DOMContentLoaded', function() {
  document.getElementById('filterJobsBtn').addEventListener('click', function() {
    const jobId = document.getElementById('filterJobId').value.trim();
    const productId = document.getElementById('filterProductId').value.trim();
    const sortOrder = document.getElementById('filterSortOrder').value.trim();
    const displayText = document.getElementById('filterDisplayText').value.trim().toLowerCase();

    const rows = document.querySelectorAll('#allJobsBody tr');
    rows.forEach(row => {
      const cells = row.querySelectorAll('td');
      if (cells.length < 6) return;
      const cellJobId = (cells[0].textContent || '').trim();
      const cellProductId = (cells[2].textContent || '').trim();
      const cellSortOrder = (cells[3].textContent || '').trim();
      const cellDisplayText = (cells[4].textContent || '').trim().toLowerCase();

      let show = true;
      if (jobId && cellJobId !== jobId) show = false;
      if (productId && cellProductId !== productId) show = false;
      if (sortOrder && cellSortOrder !== sortOrder) show = false;
      if (displayText && !cellDisplayText.includes(displayText)) show = false;

      row.style.display = show ? '' : 'none';
    });
  });
});


document.getElementById('updateAllFilteredBtn').addEventListener('click', function() {
  const rows = document.querySelectorAll('#allJobsBody tr');
  const filteredJobIds = [];
  let templateIds = new Set();
  let changeArrays = [];

  rows.forEach(row => {
    if (row.style.display === 'none') return;
    const cells = row.querySelectorAll('td');
    if (cells.length < 6) return;
    filteredJobIds.push(cells[0].textContent.trim());
    templateIds.add(cells[1].textContent.trim());
    changeArrays.push(cells[5].textContent.trim());
  });

  if (filteredJobIds.length === 0) {
    alert('No jobs match the current filter.');
    return;
  }

  // Pre-fill modal fields
  document.getElementById('templateId').value = Array.from(templateIds).join(',');
  document.getElementById('affectedJobs').value = filteredJobIds.join(',');
  // document.getElementById('currentChangeArray').value = changeArrays[0] || '';
  document.getElementById('newChangeArray').value = changeArrays[0] || '';
  document.getElementById('templateName').value = ''; // Optional, or set if you want

  // Set update condition text
  document.getElementById('updateCondition').textContent =
    `WHERE id IN (${filteredJobIds.join(',')})`;

  // Show the modal
  new bootstrap.Modal(document.getElementById('updateChangeArrayModal')).show();
});
</script>


<%- include('partials/footer') %>
wf-rule-report.ejs
