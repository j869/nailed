<%- include('../partials/header') %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Customer Form</title>

    <style>
        .drag-handle {
        cursor: move; /* Show move cursor */
        user-select: none; /* Prevent text selection */
        font-size: 18px;
        color: #ccc;
        text-align: center;
        }      

        .drag-handle:hover {
        opacity: 1;
        }

        /* Optional: Highlight row being dragged */
        tr.dragging {
        background-color: #f8f9fa;
        }        

        .d-flex {
            display: flex;
        }

        .align-items-center {
            align-items: center;
        }

        .me-2 {
            margin-right: 0.5rem; /* Add some spacing between the input and button */
        }

        #scrollableTableContainer {
            height: 400px; /* Adjust height as needed */
            overflow-y: auto; /* Enable vertical scrolling */
        }

        .hiddenRow {
            padding: 0 !important;
        }

        /* Add additional indentation for nested tables */
        .nested-table {
            margin-left: 20px; /* Adjust the indentation level as needed */
        }

        /* Second level of indentation */
        .double-nested-table {
            margin-left: 40px; /* Adjust the indentation level as needed */
        }        

        .display-text-column {
            /* Allow the column to expand dynamically based on content */
            white-space: nowrap; /* Prevent text from wrapping */
            overflow: hidden; /* Hide any content that overflows */
            text-overflow: ellipsis; /* Display ellipsis (...) for overflowed text */
        }
    </style>
    
    <!-- use for API calls when we want to set status to compelte -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>   

    <%
    function formatDate(date) {
      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
      const day = String(date.getDate()).padStart(2, '0');
      const month = months[date.getMonth()];
      const year = String(date.getFullYear()).slice(-2); // Getting last two digits of the year
      return `${day}-${month}-${year}`;
    }
    %>

</head>
<body>

<br><br><br>
<!-- Floating Options Bar -->
<style>
.floating-options-bar {
    position: fixed;
    top: 27%;
    left: 20px;
    transform: translateY(-50%);
    z-index: 1050;
    background: #f8f9fa;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    border: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: 12px;
    min-width: 160px;
    width: 200px; 
}
.floating-options-bar .btn {
    min-width: 210px;
    width: 100%;
    border: 0;
    padding: 0;
}
@media (max-width: 768px) {
    .floating-options-bar {
        display: none;
    }
}
</style>
<div class="floating-options-bar">
    <button class="btn btn-primary mb-3" style="height: 56px;" onclick="location.reload();">Save changes</button>
</div>

<div class="container"></div>

    <div class="container">
        <div class="col-md-12">
            <div class="panel panel-default">
                <h3  class="text-muted" >
                    Customers
                </h3>
                


                <!-- -------------------------------------------------------------------------- -->
                <!-- ---  customers                                                             -->
                <!-- -------------------------------------------------------------------------- -->
                <div class="panel-body">
                    <table class="table table-condensed ">
                        <thead>
                            <tr class="table-primary">
                                <th scope="col">ID</th>
                                <th scope="col">Full Name</th>
                                <th scope="col">Build Address</th>
                                <th scope="col">Primary Phone</th>
                                <th scope="col">Primary Email</th>
                                <th scope="col">Other Contact Information</th>
                                <th scope="col">Current Status</th>
                                <th scope="col">Follow-up Date</th>
                                <th scope="col">Actions</th>
                            </tr>

                        </thead>
                        <tbody>
                            <% if (locals.tableData && Array.isArray(locals.tableData)) { %>
                                <% locals.tableData.forEach(function(customer) { %>
                                    <% if (customer) { %>
                                        <tr class="accordion-toggle table-primary" data-toggle="collapse" data-target="#collapseCust<%= customer.id %>" >
                                            <td><%= customer.id %></td>
                                            <td><%= customer.full_name %></td>
                                            <td><%= customer.home_address %></td>
                                            <td><%= customer.primary_phone %></td>
                                            <td><%= customer.primary_email %></td>
                                            <td><%= customer.contact_other %></td>
                                            <td><%= customer.current_status %></td>
                                            <td class="editable" id="customerFollowUpDate" data-record-id="<%= customer.id %>"><%= customer.follow_up %></td>
                                            <td id="actions" >
                                                <a href="/customer/<%= customer.id %>" class="btn btn-green-slim"><i class="fas fa-edit"></i> </a>
                                            </td>                                            
                                        </tr>
                                        <tr>
                                            <td colspan="12" class="hiddenRow">

                                                <!-- -------------------------------------------------------------------------- -->
                                                <!-- ---  sites                                                                -->
                                                <!-- -------------------------------------------------------------------------- -->
                                                <div class="accordian-body collapse show " id="collapseCust<%= customer.id %>">
                                                    <table class="table nested-table">
                                                        <thead>
                                                            <tr class="table-secondary">
                                                                <th>ID</th>
                                                                <th>Customer ID</th>
                                                                <th>Product ID</th>
                                                                <th>Product Description</th>
                                                                <th>Enquiry Date</th>
                                                                <th>Next Job</th>
                                                                <th>Current Status</th>
                                                            </tr>
                                                        </thead>                                                        
                                                        <tbody>
                                                            <% customer.builds.forEach(function(site) { %>
                                                                <% if (site) { %>
                                                                    <tr class="accordion-toggle table-secondary" data-toggle="collapse" data-target="#collapseBuild<%= site.id %>">
                                                                        <td><%= site.id %></td>
                                                                        <td><%= site.customer_id %></td>
                                                                        <td><%= site.product_id %></td>
                                                                        <td><%= site.product_description %></td>
                                                                        <td><%= site.enquiry_date %></td>
                                                                        <td class="editable" id="nextJob" data-record-id="<%= site.id %>"><%= site.job_id %></td>
                                                                        <td>  
                                                                            <div class="form-check">
                                                                                <input class="form-check-input build-checkbox" type="checkbox" id="buildComplete<%= site.id %>" data-build-id="<%= site.id %>" <% if (site.current_status === 'complete') { %> checked <% } %>> 
                                                                                <label class="form-check-label" for="buildComplete<%= site.id %>"></label>
                                                                                <%= site.current_status %>       
                                                                            </div>
                                                                        </td>
                                                                    </tr>
                                                                    <tr>
                                                                        <td colspan="12" class="hiddenRow">

                                                                            <!-- -------------------------------------------------------------------------- -->
                                                                            <!-- ---  jobs                                                                  -->
                                                                            <!-- -------------------------------------------------------------------------- -->
                                                                            
                                                                                <div class="accordian-body collapse show " id="collapseBuild<%= site.id %>">
                                                                                    <table id="jobsTable" class="table nested-table">
                                                                                        <thead>
                                                                                            <tr class="table-info">
                                                                                                <th style="background-color:#77dd7783;">ID</th>
                                                                                                <th style="background-color:#77dd7783;">Job Group / Stage / Category</th>
                                                                                                <th style="background-color:#77dd7783;"> </th>
                                                                                                <th style="display: none;">Job Template ID</th>
                                                                                                <th style="background-color:#77dd7783;">Assign</th>
                                                                                                <th style="background-color:#77dd7783;">Role ID</th>
                                                                                                <th style="display: none;">Build ID</th>
                                                                                                <th style="display: none;">Product ID</th>
                                                                                                <th style="display: none;">Reminder ID</th>
                                                                                                <th style="display: none;">Conversation ID</th>
                                                                                                <th style="background-color:#77dd7783;">Target Date</th>
                                                                                                <th style="display: none;">Created By</th>
                                                                                                <th style="display: none;">Created Date</th>
                                                                                                <th style="display: none; background-color:#77dd7783;" >Change Array</th>
                                                                                                <th style="display: none;">Completed By</th>
                                                                                                <th style="display: none;">Completed Date</th>
                                                                                                <th style="background-color:#77dd7783;">Current Status</th>
                                                                                            </tr>
                                                                                        </thead>                                                        
                                                                                        <tbody>
                                                                                            <% site.jobs.forEach(function(job) { %>
                                                                                                <% if (job) { %>
                                                                                                    <% let jobID = job.id %>
                                                                                                    <tr class="accordion-toggle table-info" data-toggle="collapse" data-target="#collapseJob<%= jobID %>">
                                                                                                        <td style="background-color:#77DD77;" class="editable" id="jobOrder" data-record-id="<%= jobID %>"><%= job.sort_order %></td>
                                                                                                        <td style="background-color:#77DD77;" class="display-text-column"><%= job.display_text %></td>
                                                                                                        <td style="background-color:#77DD77;" style="width: 40%;"><%= job.free_text %></td>
                                                                                                        <td style="display: none;"><%= job.job_template_id %></td>
                                                                                                        <td style="background-color:#77DD77;">
                                                                                                            <select class="editable" contenteditable="true" id="jobOwner" data-record-id="<%= jobID %>" onclick="event.stopPropagation()">
                                                                                                            <option value=""></option>
                                                                                                                <% 
                                                                                                                if (Array.isArray(locals.resources)) {
                                                                                                                    locals.resources.forEach(function(resource) {
                                                                                                                %>
                                                                                                                                                                                                                            <option value="<%= resource.id %>"><%= resource.id %> <%= resource.full_name %></option>
                                                                                                                <% 
                                                                                                                    });
                                                                                                                }
                                                                                                                %>
                                                                                                            </select>
                                                                                                        </td>
                                                                                                        <td style="background-color:#77DD77;"><%= job.role_id %></td>
                                                                                                        <td style="display: none;"><%= job.build_id %></td>
                                                                                                        <td style="display: none;"><%= job.product_id %></td>
                                                                                                        <td style="display: none;"><%= job.reminder_id %></td>
                                                                                                        <td style="display: none;"><%= job.conversation_id %></td>
                                                                                                        <td style="background-color:#77DD77;" class="editable" id="jobTargetDate" data-record-id="<%= jobID %>"><%= job.target_date %></td>
                                                                                                        <td style="display: none;"><%= job.created_by %></td>
                                                                                                        <td style="display: none;"><%= job.created_date %></td>
                                                                                                        <td style="display: none; background-color:#77DD77;" ><%= job.change_array %>ID[<%= jobID %>]</td>
                                                                                                        <td style="display: none;"><%= job.completed_by %></td>
                                                                                                        <td style="display: none;"><%= job.completed_date %></td>
                                                                                                        <td style="background-color:#77DD77;">
                                                                                                            <div class="form-check">
                                                                                                                <input class="job-checkbox " title='<%= job.change_array %>ID[<%= jobID %>]' type="checkbox" id="jobStatus" data-job-id="<%= jobID %>" <% if (job.current_status === 'complete') { %> checked <% } %>> 
                                                                                                                <label class="form-check-label" for="jobComplete<%= jobID %>"><%= job.current_status %></label>
                                                                                                            </div>
                                                                                                            <div class="form-check d-none" display="none">
                                                                                                                <input class="form-check-input job-checkbox" 
                                                                                                                    type="checkbox" 
                                                                                                                    id="jobComplete<%= jobID %>" 
                                                                                                                    data-job-id="<%= jobID %>" 
                                                                                                                    <%= job.current_status === 'complete' ? 'checked' : '' %>>
                                                                                                                <label class="form-check-label" for="jobComplete<%= jobID %>"></label>
                                                                                                            </div>                                                                                                         
                                                                                                        </td>
                                                                                                    </tr>
                                                                                                    <tr>
                                                                                                        <td colspan="12" class="hiddenRow">

                                                                                                            <!-- -------------------------------------------------------------------------- -->
                                                                                                            <!-- ---  tasks                                                                 -->
                                                                                                            <!-- -------------------------------------------------------------------------- -->
                                                                                                            <div class="accordian-body collapse" id="collapseJob<%= jobID %>">
                                                                                                                <div style="display: flex; justify-content: space-between; align-items: center;">
                                                                                                                    <div style="margin-right: auto;">   
                                                                                                                        <% if (true) { %>
                                                                                                                            <button class="btn btn-sm btn-outline-secondary" onclick="window.location.href='/addjob?btn=103d&type=child&jobnum=<%= jobID %>&tier=500&returnto=build<%= site.id %>';" >Add Stage</button>
                                                                                                                        <% } %>
                                                                                                                        
                                                                                                                        <button class="btn btn-sm btn-outline-secondary" onclick="window.location.href='/addjob?btn=103a&type=child&jobnum=<%= jobID %>&tier=501&returnto=build<%= site.id %>';" >Add Task</button>
                                                                                                                        <% if (site.missing_jobs) { %>
                                                                                                                            <% site.missing_jobs.forEach(function(missingjob) { %>
                                                                                                                                <% if (missingjob) { %>
                                                                                                                                    <% if (job.sort_order >= missingjob.before && job.sort_order <= missingjob.after) { %>
                                                                                                                                        <button class="btn btn-sm btn-outline-primary" style="margin-left: auto; " onclick="window.location.href='/addjob?btn=103b&type=template<%= missingjob.id %>&jobnum=<%= jobID %>&tier=500&returnto=build<%= site.id %>';">Add <%= missingjob.display_text %></button>
                                                                                                                                    <% } %>
                                                                                                                                <% } %>
                                                                                                                            <% }); %>
                                                                                                                        <% } %>
                                                                                                                    </div>
                                                                                                                    <div style="margin-left: auto;">
                                                                                                                        <% if (locals.user.id = 1) { %>      
                                                                                                                            <button class="btn btn-sm btn-outline-secondary" onclick="window.location.href='/jobs/<%= jobID %>';" >Edit Stage</button>
                                                                                                                        <% } %>
                                                                                                                        <button class="btn btn-sm btn-outline-danger" 
                                                                                                                            onclick="if(confirm('Are you sure you want to delete this Stage?')) { if(confirm('Are you REALLY sure?')) { window.location.href='/delJob?btn=103c&jobnum=<%= jobID %>&returnto=build/<%= site.id %>'; } }" >
                                                                                                                            Delete this Stage
                                                                                                                        </button>
                                                                                                                    </div>
                                                                                                                </div>
                                                                                                                <table class="table nested-table tasks-table" id="job<%= jobID %>tasks">
                                                                                                                    <thead>
                                                                                                                        <tr class="">
                                                                                                                            <th>sort</th>
                                                                                                                            <th>Num</th>
                                                                                                                            <th class="display-text-column">Task Title</th>
                                                                                                                            <th>Free Text</th>
                                                                                                                            <th>Status</th>
                                                                                                                            <th class="d-none">Completed Date</th>
                                                                                                                            <th>Assigned To</th>
                                                                                                                            <th class="d-none">Change Log</th>
                                                                                                                            <th>Actions</th>
                                                                                                                        </tr>
                                                                                                                    </thead>                                                        
                                                                                                                    <tbody>
                                                                                                                        <% job.tasks.forEach(function(task) { %>
                                                                                                                            <% if (task) { %>
                                                                                                                                <% let taskID = task.id.substring(1) %>
                                                                                                                                <tr class="accordion-toggle " data-toggle="collapse" data-target="#collapseTask<%= taskID %>" data-row-id="<%= taskID %>" data-parent-id="<%= jobID %>" data-parent-sort-order="<%= job.sort_order %>" draggable="true" data-sort-order="<%= task.sort_order %>">
                                                                                                                                    <td class="drag-handle" data-record-id="<%= taskID %>" data-sort-order="<%= task.sort_order %>">⋮⋮</td>
                                                                                                                                    <td class="editable" contenteditable="true" id="<%= task.precedence === 'jobflow' ? 'jobOrder' : 'taskOrder' %>" data-record-id="<%= taskID %>"><%= task.sort_order %></td>
                                                                                                                                    <td class="editable" contenteditable="true" id="<%= task.precedence === 'jobflow' ? 'jobTitle' : 'taskTitle' %>" data-record-id="<%= taskID %>" style="width: 25%;"><%= task.display_text %></td>
                                                                                                                                    <td style="text-align: left;">
                                                                                                                                        <div style="display: flex; align-items: flex-start; gap: 8px;">
                                                                                                                                            <div style="display: flex; flex-direction: column; align-items: center; gap: 4px;">
                                                                                                                                                <button class="btn btn-link p-0" title="Add Attachment" onclick="showAttachmentInput('<%= taskID %>')">
                                                                                                                                                    <i class="fas fa-upload" style="color: #007bff;" title="Upload"></i>
                                                                                                                                                </button>
                                                                                                                                                <span id="attachmentSpinner_<%= taskID %>" class="spinner-border spinner-border-sm text-primary d-none" role="status" aria-hidden="true"></span>
                                                                                                                                            </div>
                                                                                                                                            <span class="editable" contenteditable="true" id="<%= task.precedence === 'jobflow' ? 'jobDesc' : 'taskDesc' %>" data-record-id="<%= taskID %>" style="flex: 1; min-width: 0; word-break: break-word;">
                                                                                                                                                <%- task.free_text ? task.free_text : '&nbsp; &nbsp;' %>
                                                                                                                                            </span>
                                                                                                                                            
                                                                                                                                        </div>
                                                                                                                                        <input type="file" id="attachmentInput_<%= taskID %>" style="display:none;" onchange="uploadJobAttachment(event, '<%= taskID %>')">
                                                                                                                                        <span class="editable" contenteditable="true" id="<%= task.precedence === 'jobflow' ? 'jobDesc' : 'taskDesc' %>" data-record-id="<%= taskID %>" style="display: inline-block; word-break: break-word;">
                                                                                                                                            <%- task.free_text ? task.free_text : '&nbsp; &nbsp;' %>
     
                                                                                                                                        </span>
                                                                                                                                        
                                                                                                                                    </td>
                                                                                                                                    <td>
                                                                                                                                        <div style="display: flex; flex-direction: column; align-items: flex-start;">
                                                                                                                                            <% if (task.current_status === 'complete') { %>
                                                                                                                                                <span style="font-size: 1em; color: #28a745; font-weight: 500;"><%= task.current_status + ':' %><br> <%= task.completed_date ? task.completed_date : '' %></span>
                                                                                                                                            <% } else { %>
                                                                                                                                                <span class="editable" id="<%= task.precedence === 'jobflow' ? 'jobTargetDate' : 'taskTargetDate' %>" data-record-id="<%= taskID %>" style="font-size: 1em; color: #007bff; font-weight: 500;">
                                                                                                                                                    <%= task.current_status ? task.current_status + ':' : '' %><br> <%= task.target_date ? task.target_date : '' %>
                                                                                                                                                </span>
                                                                                                                                            <% } %>
                                                                                                                                        </div>
                                                                                                                                    </td>
                                                                                                                                    <td id="<%= task.precedence === 'jobflow' ? 'jobPerson' : 'taskPerson' %>" data-record-id="<%= taskID %>">
                                                                                                                                        <% 
                                                                                                                                            let resourceName = null;
                                                                                                                                            let resourceID = null;
                                                                                                                                            if (Array.isArray(locals.resources)) {
                                                                                                                                                for (let i = 0; i < locals.resources.length; i++) {
                                                                                                                                                    if (locals.resources[i].id == task.owned_by) {
                                                                                                                                                        resourceName = locals.resources[i].full_name;
                                                                                                                                                        resourceID = locals.resources[i].id;
                                                                                                                                                        break;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            if (resourceName) {
                                                                                                                                                %><%= resourceID %> <%= resourceName %><%
                                                                                                                                            } else {
                                                                                                                                                %><%= task.owned_by %><%
                                                                                                                                            }
                                                                                                                                        %>
                                                                                                                                    <td class="d-none">ID[<%= task.id %>] <%= task.change_log %></td>
                                                                                                                                    <td>
                                                                                                                                        <div class="form-check" style="display: flex; align-items: center;">
                                                                                                                                            <input class="editable" title='ID[<%= task.id %>] <%= task.change_log %>' type="checkbox" id="<%= task.precedence === 'jobflow' ? 'jobStatus' : 'taskStatus' %>" data-record-id="<%= taskID %>" <% if (task.current_status === 'complete') { %> checked <% } %> style="width: 32px; height: 32px; accent-color: #28a745; margin-right: 8px; box-shadow: 0 2px 8px rgba(40,167,69,0.15); border-radius: 50%; border: 2px solid #e0e0e0; background: #fff;">
                                                                                                                                            <label class="d-none form-check-label" for="taskComplete<%= taskID %>" style="font-size: 0.95em; font-weight: 400; color: #aaa; opacity: 0.7; margin-left: 2px;"> <%= task.current_status %></label>
                                                                                                                                        </div>

                                                                                                                                        <div class="form-check d-none">
                                                                                                                                            <input class="form-check-input <%= task.precedence === 'jobflow' ? 'job-checkbox' : 'task-checkbox' %>" 
                                                                                                                                                    type="checkbox" 
                                                                                                                                                    id="taskComplete<%= taskID %>" 
                                                                                                                                                    data-<%= task.precedence === 'jobflow' ? 'job' : 'task' %>-id="<%= taskID %>"
                                                                                                                                                    <%= task.current_status === 'complete' ? 'checked' : '' %>
                                                                                                                                                    aria-label="Mark task as complete">
                                                                                                                                            
                                                                                                                                            <label class="form-check-label" for="taskComplete<%= taskID %>">
                                                                                                                                                <%= task.current_status === 'complete' ? 'Done' : '' %>
                                                                                                                                            </label>
                                                                                                                                            
                                                                                                                                            <span class="spinner-border spinner-border-sm text-primary ms-2 d-none" 
                                                                                                                                                    role="status"
                                                                                                                                                    aria-hidden="true"></span>
                                                                                                                                        </div>                                                                                                                                    
                                                                                                                                    </td>                                                                                                                                         
                                                                                                                                </tr>
                                                                                                                                <tr>
                                                                                                                                    <td colspan="12" class="hiddenRow">

                                                                                                                                        <!-- -------------------------------------------------------------------------- -->
                                                                                                                                        <!-- ---  reminders                                                             -->
                                                                                                                                        <!-- -------------------------------------------------------------------------- -->
                                                                                                                                        <div class="accordian-body collapse" id="xxcollapseTask<%= taskID %>">
                                                                                                                                            
                                                                                                                                            <table class="table nested-table">
                                                                                                                                                <thead>
                                                                                                                                                    <tr class="table-warning">
                                                                                                                                                        <th>ID</th>
                                                                                                                                                        <th>Task ID</th>
                                                                                                                                                        <th>Current Status</th>
                                                                                                                                                        <th>Created By</th>
                                                                                                                                                        <th>Trigger</th>
                                                                                                                                                        <th>Medium</th>
                                                                                                                                                        <th>Change Log</th>
                                                                                                                                                        <th>Escalation 1 Interval</th>
                                                                                                                                                        <th>Escalation 2 Interval</th>
                                                                                                                                                        <th>Escalation 3 Interval</th>
                                                                                                                                                        <th>Definition Object</th>
                                                                                                                                                    </tr>
                                                                                                                                                </thead>                                                        
                                                                                                                                                <tbody>
                                                                                                                                                    <% task.reminders.forEach(function(reminder) { %>
                                                                                                                                                        <% if (reminder) { %>
                                                                                                                                                            <tr class="xxaccordion-toggle table-warning" data-toggle="collapse" data-target="#collapseReminder<%= reminder.id %>">
                                                                                                                                                                <td><%= reminder.id %></td>
                                                                                                                                                                <td><%= reminder.task_id %></td>
                                                                                                                                                                <td><%= reminder.current_status %></td>
                                                                                                                                                                <td><%= reminder.created_by %></td>
                                                                                                                                                                <td><%= reminder.trigger %></td>
                                                                                                                                                                <td><%= reminder.medium %></td>
                                                                                                                                                                <td><%= reminder.change_log %></td>
                                                                                                                                                                <td><%= reminder.escalation1_interval %></td>
                                                                                                                                                                <td><%= reminder.escalation2_interval %></td>
                                                                                                                                                                <td><%= reminder.escalation3_interval %></td>
                                                                                                                                                                <td><%= reminder.definition_object %></td>
                                                                                                                                                            </tr>
                                                                                                                                                            <tr class="table-warning">
                                                                                                                                                                <td colspan="12" class="hiddenRow">
                                
                                                                                                                                                                    <!-- -------------------------------------------------------------------------- -->
                                                                                                                                                                    <!-- ---  unused accordian div                                                  -->
                                                                                                                                                                    <!-- -------------------------------------------------------------------------- -->
                                                                                                                                                                    <div class="accordian-body collapse" id="collapseReminder<%= reminder.id %>">
                                                                                                                                                                        
                                                                                                                                                                        unused <%= reminder.id %>
                                                                                                                                                                    </div>
                                                                                                                                                                </td>
                                                                                                                                                            </tr>
                                                                                                                                                        <% } %>
                                                                                                                                                    <% }); %>
                                                                                                                                                </tbody>
                                                                                                                                            </table>
                                                                                                                                        </div>
                                                                                                                                    </td>
                                                                                                                                </tr>
                                                                                                                            <% } %>
                                                                                                                        <% }); %>
                                                                                                                    </tbody>
                                                                                                                </table>
                                                                                                            </div>

                                                                                                        </td>
                                                                                                    </tr>
                                                                                                
                                                                                                <% } %>
                                                                                            <% }); %>

                                                                                        </tbody>
                                                                                    </table>
                                                                                </div>
                                                                            
                                                                        </td>
                                                                    </tr>
                                                                <% } %>
                                                            <% }); %>
                                                        </tbody>
                                                    </table>



                                                
                                                </div>
                                            </td>
                                        </tr>
                                    <% } %>
                                <% }); %>
                            <% } %>
                        </tbody>
                    </table>
                </div>



                <!-- -------------------------------------------------------------------------- -->
                <!-- ---  Uploaded Files                                                        -->
                <!-- -------------------------------------------------------------------------- -->
                <h3 class="text-muted">Uploaded Files</h3>
                <form id="uploadForm" class="mt-3">
                    <div class="mb-3 d-flex w-50 align-items-center">
                        <!-- <label for="fileInput" class="form-label">Choose a file to upload:</label> -->
                        <input type="file" id="fileInput" name="file" class="form-control me-2" required>
                        <button type="submit" class="btn btn-primary">Upload</button>
                    </div>
                </form>
                <p id="message" class="mt-2"></p>
                <div id="fileList" class="list-group"></div>
                <br><br>
            



                <!-- -------------------------------------------------------------------------- -->
                <!-- ---  Customer Emails                                                       -->
                <!-- -------------------------------------------------------------------------- -->
                <div id="emailSection">
                    <h3 class="text-muted">Customer Emails</h3>

                    <% locals.tableData.forEach(function(customer) { %>
                        <div class="mb-3 d-flex gap-2">
                            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#composeEmailModal" data-customer-id="<%= customer.id %>" data-customer-email="<%= customer.primary_email %>">
                                <i class="fas fa-envelope"></i> Compose Email
                            </button>
                            <a href="/checkemail?btn=103d&customer_id=<%= customer.id %>&returnto=customer/<%= customer.id %>" class="btn btn-primary">
                                <i class="fas fa-sync"></i> Check for new emails
                            </a>
                        </div>

                        <% if (customer && customer.emails && customer.emails.length > 0) { %>
                            <div class="email-threads">
                                <% 
                                // Group emails by thread (simplified: group by subject for now)
                                const threads = {};
                                customer.emails.forEach(email => {
                                    const subject = email.subject || 'No Subject';
                                    const threadKey = subject.toLowerCase().replace(/^re:\s*/i, '').trim();
                                    if (!threads[threadKey]) {
                                        threads[threadKey] = [];
                                    }
                                    threads[threadKey].push(email);
                                });

                                Object.keys(threads).forEach(threadKey => {
                                    const threadEmails = threads[threadKey].sort((a, b) => new Date(a.post_date) - new Date(b.post_date));
                                %>
                                    <div class="email-thread mb-3 border rounded">
                                        <div class="thread-header bg-light p-2 d-flex justify-content-between align-items-center">
                                            <h5 class="mb-0">
                                                <i class="fas fa-comments"></i>
                                                <%= threadEmails[0].subject || 'No Subject' %>
                                                <small class="text-muted">(<%= threadEmails.length %> message<%= threadEmails.length > 1 ? 's' : '' %>)</small>
                                            </h5>
                                            <button class="btn btn-sm btn-outline-primary" type="button" data-bs-toggle="collapse" data-bs-target="#thread-<%= threadKey.replace(/[^a-zA-Z0-9]/g, '-') %>">
                                                <i class="fas fa-chevron-down"></i>
                                            </button>
                                        </div>
                                        <div class="collapse show" id="thread-<%= threadKey.replace(/[^a-zA-Z0-9]/g, '-') %>">
                                            <% threadEmails.forEach((email, index) => { %>
                                                <div class="email-message p-3 border-bottom <%= index === threadEmails.length - 1 ? 'border-bottom-0' : '' %>">
                                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                                        <div>
                                                            <strong><%= email.display_name %></strong>
                                                            <% if (email.display_name.includes('Sent to')) { %>
                                                                <span class="badge bg-success ms-2">Sent</span>
                                                            <% } else { %>
                                                                <span class="badge bg-primary ms-2">Received</span>
                                                            <% } %>
                                                        </div>
                                                        <div class="text-muted small">
                                                            <%= new Date(email.post_date).toLocaleString() %>
                                                        </div>
                                                    </div>
                                                    <div class="email-content mb-2">
                                                        <% if (email.message_text) { %>
                                                            <div class="email-body">
                                                                <%- email.message_text.replace(/\n/g, '<br>') %>
                                                            </div>
                                                        <% } else { %>
                                                            <em class="text-muted">No message body available</em>
                                                        <% } %>
                                                    </div>
                                                    <div class="email-actions">
                                                        <button type="button" class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#composeEmailModal"
                                                                data-customer-id="<%= customer.id %>" data-customer-email="<%= customer.primary_email %>"
                                                                data-reply-to="<%= email.display_name %>" data-subject="Re: <%= email.subject %>">
                                                            <i class="fas fa-reply"></i> Reply
                                                        </button>
                                                    </div>
                                                </div>
                                            <% }); %>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        <% } else { %>
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle"></i> No emails found for this customer. Click "Check for new emails" to fetch recent messages.
                            </div>
                        <% } %>
                    <% }); %>
                </div>
            </div>

        </div>
    </div>

</div>













    <!-- JavaScript to handle the API request -->
<script>



    document.addEventListener('DOMContentLoaded', function() {
        var table = document.getElementById('jobsTable');
        var headerRow = table.querySelector('thead tr'); // Select the header row
        var rows = table.querySelectorAll('tbody tr');
        var totalRows = rows.length;
        var visibleRowCount = totalRows; // Initial number of visible rows

        // Function to scroll rows - hids or shows rows based on scroll
        function updateVisibleRows() {
            console.log("gu1    updating rows ");
            
            rows.forEach(function(row, index) {
                if (index < visibleRowCount || index === totalRows - 1) {
                    row.style.display = ''; // Show row
                    
                    var jobTargetDateCell = row.querySelector('td#jobTargetDate');
                    // console.log("gu21   jobTargetDate cell:", jobTargetDateCell);
                    // console.log("gu22    ", row.style.display);

                } else {
                    row.style.display = 'none'; // Hide row
                    // console.log("gu3    ", row.style.display);
                }
            });
        }

        // Initial setup
        updateVisibleRows();

        // Add mouse wheel event listener to the table
        headerRow.addEventListener('wheel', function(event) {
            // Prevent the default scroll behavior
            event.preventDefault();
            console.log("gt1    Mouse wheel event detected. DeltaY: ", event.deltaY);

            // Adjust the number of visible rows based on the wheel delta
            if (event.deltaY > 0) {
                // Scrolling up: show fewer rows, but ensure at least one row is visible
                visibleRowCount = Math.max(visibleRowCount - 6, 1);
                console.log("gt3    removing rows ", visibleRowCount);
            } else {
                // Scrolling down: show more rows
                visibleRowCount = Math.min(visibleRowCount + 6, totalRows);
                console.log("gt2    adding rows ", visibleRowCount);
            }

            // Update the visibility of rows
            updateVisibleRows();
        });
    });



    $(document).ready(function() {
    console.log("tb1    DOM ready - initializing task checkboxes");
    
    // Debouncing variables
    let isProcessing = false;
    let lastClickTime = 0;
    const DEBOUNCE_DELAY = 500; // 0.5 seconds
    
    // Event delegation with debouncing
    $(document).on('change', '.task-checkbox', function() {
        const now = Date.now();
        if (isProcessing || (now - lastClickTime) < DEBOUNCE_DELAY) {
        $(this).prop('checked', !$(this).is(':checked')); // Revert checkbox
        return;
        }
        
        lastClickTime = now;
        isProcessing = true;
        
        const $checkbox = $(this);
        const taskId = $checkbox.attr('data-task-id');
        const isChecked = $checkbox.is(':checked');
        const $label = $checkbox.next('.form-check-label');
        const $spinner = $checkbox.siblings('.spinner-border'); // Get spinner
        
        // Show spinner and disable checkbox during processing
        $spinner.removeClass('d-none');
        $checkbox.prop('disabled', true);
        
        console.log(`tb2    Updating task ${taskId} status to ${isChecked ? 'true' : 'false'}`);
        
        $.ajax({
        url: '<%= locals.baseUrl %>/taskComplete',
        method: 'POST',
        data: {
            taskId: taskId,
            status: isChecked ? 'true' : 'false'
        },
        success: function(response) {
            console.log(`tb3     Task ${taskId} updated successfully`);
            $label.text(isChecked ? 'Done' : '');
            
            // Optional: Handle additional response data
            if (response.message) {
            showNotification(response.message, false); // Example: Show notification
            }
        },
        error: function(xhr, status, error) {
            console.error(`tb81   Error updating task ${taskId}:`, error);
            showNotification(`Error updating task ${taskId}: ${error.message}`); // Example: Show notification
            // Revert UI state
            $checkbox.prop('checked', !isChecked);
            $label.text(isChecked ? '' : 'Done');
            
            // Show error message
            showNotification('Failed to update task status');
        },
        complete: function() {
            // Always execute
            $spinner.addClass('d-none');
            $checkbox.prop('disabled', false);
            isProcessing = false;
        }
        });
    });
    
    
    });



        $(document).ready(function() {
        console.log("jb1     DOM ready - initializing job checkboxes");
            
            // Use event delegation for dynamic elements
            $(document).on('change', '.job-checkbox', function() {
                const jobId = $(this).attr('data-job-id');
                const isChecked = $(this).is(':checked');
                
                console.log(`jb2    Checkbox changed for job ${jobId}, new status: ${isChecked}`);
                
                $.ajax({
                url: '<%= locals.baseUrl %>/jobComplete',
                method: 'POST',
                data: {
                    jobId: jobId,
                    status: isChecked ? 'true' : 'false' 
                },
                success: function(response) {
                    console.log(`jb9    Success: Job ${jobId} status updated to ${isChecked}`);
                    showNotification(`Job ${jobId} and all children set to ${isChecked}`, false);
                    // Optional: Update UI based on response
                },
                error: function(xhr, status, error) {
                    console.error(`jb8    Error updating job ${jobId}:`, error);
                    showNotification(`Error updating job ${jobId}: ${error.message}`, true);
                    // Revert checkbox if error occurs
                    $(this).prop('checked', !isChecked);
                }.bind(this) // Maintain checkbox context in error handler
                });

            });
        });


        
        $(document).ready(function() {
            console.log("c1   ");
            // Add click event listener to the checkbox with class 'build-checkbox'
            $('.build-checkbox').click(function() {
                // Get the build ID from the data attribute
                var buildId = $(this).data('build-id');
                console.log("c2   ", buildId);
                // Determine if checkbox is checked
                var isChecked = $(this).prop('checked');
                console.log("c3   ", isChecked);
                // Send API request to update build status
                $.ajax({
                    url: '<%= locals.baseUrl %>/buildComplete', 
                    method: 'POST', 
                    data: {
                        buildId: buildId,
                        status: isChecked
                    },
                    success: function(response) {
                        // Handle success response if needed
                        console.log('c9    build status updated successfully');
                    },
                    error: function(xhr, status, error) {
                        // Handle error response if needed
                        console.error('c8    Error updating build status:', error);
                    }
                });
            });
        });
    </script>

</body>



</html>

<script>


    console.log("locals ", <%- JSON.stringify(locals) %>);

    //---  add listener to all EDITABLE fields.  When field changes, notify the database
    const baseUrl = "<%= locals.baseUrl %>";
    const apiUrl = baseUrl.replace("3000", "4000") 
    console.log("lf3     apiUrl: ", apiUrl);



let notificationTimeout;
function showNotification(message, isError = true) {
    const notification = document.getElementById('notification');
    // Store messages and error states
    if (!notification._messages) notification._messages = [];
    if (!notification._errorStates) notification._errorStates = [];

    if (notification.style.display === 'block') {
        notification._messages.push(message.replace(/\n/g, ' '));
        notification._errorStates.push(isError);
    } else {
        notification._messages = [message.replace(/\n/g, ' ')];
        notification._errorStates = [isError];
    }

    // Render each message with tick/cross
    notification.innerHTML = notification._messages.map((m, i) => {
        const icon = notification._errorStates[i] ? '❌' : '✔️';
        return icon + ' ' + m.replace(/\n/g, '<br>');
    }).join('<br>');
    notification.style.display = 'block';

    // If any error, show red; else green
    const hasError = notification._errorStates.some(Boolean);
    notification.style.background = hasError ? '#ff4444' : '#4CAF50';

    if (notificationTimeout) {
        clearTimeout(notificationTimeout);
    }
    notificationTimeout = setTimeout(() => {
        notification.style.display = 'none';
        notification.innerHTML = '';
        notification._messages = [];
        notification._errorStates = [];
    }, 5000);
}
        

document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM loaded - initializing editable elements");
    
    // Debounce variables
    let isUpdating = false;
    let lastUpdateTime = 0;
    const DEBOUNCE_DELAY = 1000; // 1 second delay
    
    // Store original values for rollback
    const originalValues = new Map();
    
    const editableElements = document.querySelectorAll('.editable');
    
    editableElements.forEach(function(element) {
        // Store initial values
        console.log('id221   setting original value')
        if (element.tagName === "SELECT") {
            originalValues.set(element, element.value);
        } else if (element.type === "checkbox") {
            originalValues.set(element, element.checked);
        } else {
            console.log('id2213   ... new value is ', element.textContent)
            originalValues.set(element, element.textContent);
        }
        
        element.addEventListener('dblclick', function(event) {
            if (isUpdating) return;
            
            console.log("Double-click detected on editable element");
            event.preventDefault();
            event.target.contentEditable = true;
            event.target.focus();
        });
        
        element.addEventListener('blur', async function(event) {
            const now = Date.now();
            if (isUpdating ) {      //   if (isUpdating || (now - lastUpdateTime) > DEBOUNCE_DELAY) { 
                console.log("id2   Debounced blur event ignored");
                resetToOriginalValue(event.target);
                return;
            }
            
            isUpdating = true;
            lastUpdateTime = now;
            
            try {
                console.log("id1   Processing blur event on editable element");
                
                let newValue;
                const target = event.target;
                

                // Determine new value
                target.contentEditable = false; 
                if (target.tagName === "SELECT") {
                    newValue = target.value;
                } else if (target.type === "checkbox") {
                    newValue = target.checked ? 'complete' : 'pending';
                } else if (target.id === "jobDesc" ) {
                    newValue = target.innerHTML.trim();
                } else {
                    newValue = target.innerText.trim();  //textContent;
                }
                

                const fieldID = target.id;
                const recordID = target.getAttribute('data-record-id');
                if (fieldID === "jobTitle") {
                    if (newValue.length > 126) {
                        console.warn("id3   Task title exceeds 126 characters, truncating");
                        newValue = newValue.substring(0, 123) + "...";
                    }
                }

                console.log("id41    Original:", JSON.stringify(newValue)); // Shows escape chars
                console.log("id42    Encoded:", encodeURIComponent(newValue)); // Shows %0A, %0D etc.                
                console.log(`id4    Attempting update - Field: ${fieldID}, Value: ${newValue}, Record: ${recordID}`);
                
//                try {
                    const response = await fetch(`/update?fieldID=${fieldID}&newValue=${encodeURIComponent(newValue)}&whereID=${recordID}`);
                    console.log("id45     ", response.status, response.statusText);
                    if (!response.ok) {
                        if (response.status === 400) {
                            const errorData = await response;
                            console.log('id48    Validation error:', errorData);
                            showNotification('Validation error! ' );
                            throw new Error('Validation error');
                        } else {
                            showNotification('Server error: ' );
                            console.log('id58    Error:', response.status);
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                    } else {
                        console.log('id5    response OK');
                        showNotification(`Update successful! ${fieldID}(${recordID})=${newValue}`, false);
                        target.contentEditable = true;
                    }
  //              } catch (error) {
                 //   console.log("id38      ", error)
    //            }
                console.log('id9    Update successful');
                
                // Update stored original value on success
                console.log('id223   setting original value')
                if (target.tagName === "SELECT") {
                    originalValues.set(target, target.value);
                } else if (target.type === "checkbox") {
                    originalValues.set(target, target.checked);
                } else {
                    originalValues.set(target, target.textContent);
                }
                
            } catch (error) {
                console.error('id8     Update failed:', error, 'reset value', event.target);
                showNotification('Validation failed');
                resetToOriginalValue(event.target);
            } finally {
                isUpdating = false;
            }
        });
    });
    
    function resetToOriginalValue(element) {
        console.log('id224   return to original value')
        const originalValue = originalValues.get(element);
        console.log("rr1    Resetting to original value", originalValue);
        
        if (element.tagName === "SELECT") {
            element.value = originalValue;
        } else if (element.type === "checkbox") {
            element.checked = originalValue;
        } else {
            element.textContent = originalValue;
           // element.contentEditable = false;
        }
        
        // Dispatch change event to ensure UI updates
        const event = new Event('change');
        element.dispatchEvent(event);
    }
});


// Add event listener for the file upload
document.addEventListener("DOMContentLoaded", function () {
    console.log("uf1      DOM fully loaded and script initialized.");

    const uploadForm = document.getElementById("uploadForm");
    const fileInput = document.getElementById("fileInput");
    const messageBox = document.getElementById("message");

    if (!uploadForm || !fileInput || !messageBox) {
        console.error("uf81      Error: Required form elements not found!");
        return;
    }

    console.log("uf2      Upload form elements found successfully.");

    uploadForm.addEventListener("submit", async (event) => {
        event.preventDefault();
        console.log("uf3      Upload form submitted.");

        const buildId = <%= locals.tableData[0].builds[0].id %>;    //customer.builds[0].id
        const file = fileInput.files[0];

        if (!file) {
            console.warn("uf82      No file selected for upload.");
            messageBox.textContent = "Please select a file.";
            return;
        }

        console.log(`uf4      Selected file for build(${buildId}): ${file.name}, Type: ${file.type}, Size: ${file.size} bytes`);

        const formData = new FormData();
        formData.append("file", file);
        
        // const jobId = <= job.job_id >;

        formData.append("build_id", buildId);
        // formData.append("job_id", jobId);

        try {
            console.log("uf5      Sending file to backend...");    
            const response = await fetch(`${apiUrl}/upload`, {
                method: "POST",
                body: formData,
            });

            console.log(`uf6      Response received: Status ${response.status}`);

            if (response.ok) {
                messageBox.textContent = "File uploaded successfully!";
                fileInput.value = ""; // Clear input
                console.log("uf9      File uploaded successfully.");
                showNotification('File uploaded successfully!', false);                
            } else {
                messageBox.textContent = "File upload failed.";
                console.error("uf83      File upload failed with status:", response.status);
                showNotification('File upload failed!');
            }
        } catch (error) {
            console.error("uf8      Upload error:", error);
            messageBox.textContent = "Error uploading file.";
            showNotification('Error uploading file!');
        }
    });
});


document.addEventListener("DOMContentLoaded", async function () {
    console.log("lf1     Fetching uploaded files...");
    const buildId = <%= locals.tableData[0].builds[0].id %>;    //customer.builds[0].id
    console.log('lf45   ' + buildId)

    const fileListContainer = document.getElementById("fileList");

    if (!fileListContainer) {
        console.error("lf81     Error: fileList container not found!");
        return;
    }

    try {
        const build_id = <%= locals.tableData[0].builds[0].id %>;   
        const response = await fetch(`${apiUrl}/files?build_id=${build_id}`);
        const files = await response.json();

        if (files.length === 0) {
            fileListContainer.innerHTML = "<p>No uploaded files found.</p>";
            console.warn("lf82     No files available for download.");
            return;
        }

        console.log(`lf2     Displaying ${files.length} files.`);

        // Generate list of downloadable links with delete buttons
        fileListContainer.innerHTML = files.map(file =>
            `<li>
                <a href="${apiUrl}/download/${file.id}" download>${file.filename}</a>
                <button class="btn btn-link text-danger btn-sm delete-btn" data-id="${file.id}">
                    <i class="fas fa-times"></i> 
                </button>
                
            </li>`
        ).join("");

        console.log("lf3     File list rendered successfully.");

        // Add event listeners to all delete buttons
        document.querySelectorAll(".delete-btn").forEach(button => {
            button.addEventListener("click", async function () {
                const fileId = this.getAttribute("data-id");
                console.log(`df4     Delete button clicked for file ID: ${fileId}`);

                try {
                    console.log(`df5     Sending DELETE request for file ID: ${fileId}`);
                    const deleteResponse = await fetch(`${apiUrl}/deletefile/${fileId}`, {
                        method: "DELETE",
                    });

                    const result = await deleteResponse.json();
                    console.log(`df6     Server response: ${result.message}`);

                    if (deleteResponse.ok) {
                        console.log(`df9     File ID ${fileId} deleted successfully. Removing from UI.`);
                        this.parentElement.remove();
                    } else {
                        console.warn(`df83     Failed to delete file ID: ${fileId}`);
                        showNotification('Failed to delete file', false);
                    }
                } catch (error) {
                    console.error("df831     Error deleting file:", error);
                }
            });
        });

    } catch (error) {
        console.error("df8     Error fetching file list:", error);
        showNotification('Failed to fetch file list');
        fileListContainer.innerHTML = "<p>Error loading files.</p>";
    }
});



//new + better method of doing file attachments - save to drive not database for scalability
// Show file input when attachment button is clicked
function showAttachmentInput(taskID) {
    const input = document.getElementById('attachmentInput_' + taskID);
    if (input) input.click();
}

// Handle file upload for a specific task
async function uploadJobAttachment(event, taskID) {
    const file = event.target.files[0];
    console.log("ua1    uploadJobAttachment called for taskID:", taskID, "file:", file);
    if (!file) return;

    // Show spinner
    const spinner = document.getElementById('attachmentSpinner_' + taskID);
    if (spinner) spinner.classList.remove('d-none');

    const formData = new FormData();
    formData.append('file', file);
    formData.append('task_id', taskID);

    try {
    const response = await fetch(apiUrl + '/fileUpload', {
            method: 'POST',
            body: formData
        });
        if (response.ok) {
            showNotification('Attachment uploaded!', false);
            // console.log('ua5    Attachment uploaded successfully');
            console.log("ua3    Server response:", response);
            const data = await response.json();
            const newFileName = data.filename;
            //const newFileName = response.filename;
            console.log("ua4    New file name from server:", newFileName);
            const originalName = file.name;
            //add download html to the free_text field and trigger the save event
            //get element where id=jobDesc and data-record-id=taskID
            const jobDesc = document.querySelector(`#jobDesc[data-record-id="${taskID}"]`);
            // console.log("ua51    jobDesc element:", jobDesc);
            if (jobDesc) {
                // console.log("ua6    Found jobDesc element for taskID:", taskID);
                const fileType = originalName.split('.').pop().toLowerCase();
                let iconColor = '#1bbd0c';
                let iconClass = 'fas fa-save';
                if (fileType === 'pdf') {
                    iconColor = '#d9534f';
                    iconClass = 'fas fa-file-pdf';
                } else if (fileType === 'txt') {
                    iconColor = '#007bff';
                    iconClass = 'fas fa-file-alt';
                } else if (fileType === 'doc' || fileType === 'docx') {
                    iconColor = '#2b579a';
                    iconClass = 'fas fa-file-word';
                } else if (["jpg", "jpeg", "png", "gif", "bmp", "webp"].includes(fileType)) {
                    iconColor = '#f4b400';
                    iconClass = 'fas fa-file-image';
                }
                // console.log("ua7    File type:", fileType, "Icon class:", iconClass);
                // console.log(`ua71    <i class="${iconClass}" style="color: ${iconColor}; margin-left: 6px; vertical-align: middle; cursor:pointer;" title="${originalName}" onclick="downloadAttachment('${newFileName}','${originalName}')"></i>`)
                console.log("ua72    filename", newFileName);
                jobDesc.innerHTML += ` - File: <i class="${iconClass}" style="color: ${iconColor}; cursor:pointer;" title="${originalName}" onclick="downloadAttachment('${newFileName}','${originalName}')"></i> ${originalName}`;
                //console.log("ua8    Updated jobDesc HTML:", jobDesc.innerHTML);

                // Trigger blur event to save changes
                jobDesc.dispatchEvent(new Event('input', { bubbles: true }));

                jobDesc.focus();
                console.log("ua9   Added attachment", newFileName, "to task", taskID);
            }
        } else {
            showNotification('Failed to upload attachment');
        }
    } catch (err) {
        showNotification('Error uploading attachment');
    }
    // Hide spinner
    if (spinner) spinner.classList.add('d-none');
    // Optionally reset file input
    event.target.value = '';
}

async function downloadAttachment(fileName, originalName) {
    if (!fileName) return;
    try {
        const response = await fetch(apiUrl + '/fileDownload/' + fileName);
        if (!response.ok) throw new Error('Download failed');
        const blob = await response.blob();
        // Get fileName from response headers or fallback
        let downloadName = originalName ? originalName : fileName ;
        const disposition = response.headers.get('Content-Disposition');
        if (disposition && disposition.indexOf('filename=') !== -1) {
            originalName = disposition.split('filename=')[1].replace(/"/g, '').trim();
        }
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = originalName;
        document.body.appendChild(a);
        a.click();
        a.remove();
        window.URL.revokeObjectURL(url);
    } catch (err) {
        showNotification('Failed to download attachment');
    }
}


//drag and drop to reorder tasks within a job
document.addEventListener('DOMContentLoaded', () => {
    console.log("dr1    Initializing drag-and-drop functionality for tasks");
  let table 
  let draggedRow = null;


    document.querySelectorAll('.drag-handle').forEach(handle => {
        // Get parent TR and its data-sort-order
        const parentTr = handle.closest('tr');
        const sortOrder = parentTr.getAttribute('data-sort-order');
        const parentId = parentTr.getAttribute('data-parent-id');     // this task is a child of this job
        // console.log("dr3    drag-handle (parent sort-order:", sortOrder + ")");
        
        handle.addEventListener('mousedown', (e) => {
            table = document.getElementById('job' + parentId + 'tasks');
            console.log("dr20    Drag handle clicked (sort-order:", sortOrder + ")");
            console.log("dr21      Table [job" + parentId + "tasks] exists:", !!table);
            console.log("dr22      Drag handles found:", table.querySelectorAll('.drag-handle').length);
            draggedRow = e.target.closest('tr');
            draggedRow.classList.add('dragging');
        });
    });

    document.querySelectorAll('.tasks-table').forEach(table => {
        console.log("dr11    Found tasks table:", table.id);

        // Handle drag start (required for draggable elements)
        table.addEventListener('dragstart', (e) => {
            if (e.target.classList.contains('drag-handle')) {
                console.log("dr4    Drag started on handle");
            e.dataTransfer.setData('text/plain', ''); // Required for Firefox
            e.target.style.cursor = 'grabbing';
            }
        });

        // Handle drag over and drop
        table.addEventListener('dragover', (e) => {
            e.preventDefault();
            const targetRow = e.target.closest('tr');
            if (targetRow && targetRow !== draggedRow) {
                // console.log("dr5    Drag over target row (sort-order:", targetRow.dataset.sortOrder + ")");
            const rect = targetRow.getBoundingClientRect();
            const mid = rect.top + rect.height / 2;
            if (e.clientY < mid) {
                targetRow.before(draggedRow); // Insert above
            } else {
                targetRow.after(draggedRow); // Insert below
            }
            }
        });

        // Handle drag end
        table.addEventListener('dragend', () => {
            if (draggedRow) {
                // console.log("dr6    Drag ended on row (sort-order:", draggedRow.dataset.sortOrder + ")");
            draggedRow.classList.remove('dragging');
            updateSortOrder(); // Update sort_order values
            draggedRow = null;
            }
        });
    });


  // Update sort_order based on new positions
  function updateSortOrder() {
    console.log("dr7    Updating sort_order for all rows");
    const rows = table.querySelectorAll('tbody tr[data-sort-order]');
    console.log("dr71    Total rows:", rows.length);
    rows.forEach((row, index) => {
        // console.log("dr72    Processing row:", row, index);
        console.log(`dr73    Row ${index + 1}: ID = ${row.dataset.rowId}, Current sort_order = ${row.dataset.sortOrder}`);
        // const sortOrder = row.getAttribute('data-sort-order');
        // const parentId = parentTr.getAttribute('data-parent-id');   
        const baseOrder = row.dataset.parentSortOrder.split('.')[0]; // e.g., "03"
        row.dataset.sortOrder = `${baseOrder.padStart(2, '0')}.${String(index + 1).padStart(2, '0')}`; // e.g., "03.01", "03.02", etc.
        console.log(`dr74    Row ${row.dataset.rowId}: New sort_order = ${row.dataset.sortOrder}`);
        const jobOrderCell = row.querySelector('td#jobOrder');
        if (jobOrderCell) {
            jobOrderCell.innerText = row.dataset.sortOrder;
        }
        try {
            const response = fetch(`/update?fieldID=jobOrder&newValue=${row.dataset.sortOrder}&whereID=${row.dataset.rowId}`);
            if (response.ok) {
                showNotification('Task order updated successfully', true);
            } else {
                console.error("Error response from server:", response.statusText);
                showNotification('Failed to update task order', false);
            }
        } catch (error) {
            console.error("Error updating sort_order:", error);
            showNotification('Failed to update task order', false);
        }
    });
  }
});


</script>

<!-- Compose Email Modal -->
<div class="modal fade" id="composeEmailModal" tabindex="-1" aria-labelledby="composeEmailModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="composeEmailModalLabel">Compose Email</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form id="composeEmailForm">
        <div class="modal-body">
          <input type="hidden" id="customerId" name="customerId">
          <div class="mb-3">
            <label for="toEmail" class="form-label">To:</label>
            <input type="email" class="form-control" id="toEmail" name="toEmail" required>
          </div>
          <div class="mb-3">
            <label for="subject" class="form-label">Subject:</label>
            <input type="text" class="form-control" id="subject" name="subject" required>
          </div>
          <div class="mb-3">
            <label for="message" class="form-label">Message:</label>
            <textarea class="form-control" id="message" name="message" rows="10" required></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Send Email</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
// Handle compose email modal
document.getElementById('composeEmailModal').addEventListener('show.bs.modal', function (event) {
  const button = event.relatedTarget;
  if (button) {
    const customerId = button.getAttribute('data-customer-id');
    const customerEmail = button.getAttribute('data-customer-email');
    const replyTo = button.getAttribute('data-reply-to');
    const subject = button.getAttribute('data-subject');

    document.getElementById('customerId').value = customerId;
    document.getElementById('toEmail').value = customerEmail;

    if (replyTo && subject) {
      document.getElementById('subject').value = subject;
      document.getElementById('message').value = `\n\n--- Original message ---\nFrom: ${replyTo}`;
    } else {
      document.getElementById('subject').value = '';
      document.getElementById('message').value = '';
    }
  }
});

// Handle form submission
document.getElementById('composeEmailForm').addEventListener('submit', async function (event) {
  event.preventDefault();

  const formData = new FormData(this);
  const data = Object.fromEntries(formData);

  try {
    const response = await fetch('/send-email', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });

    if (response.ok) {
      alert('Email sent successfully!');
      bootstrap.Modal.getInstance(document.getElementById('composeEmailModal')).hide();
      // Optionally refresh the page or update the email list
      location.reload();
    } else {
      alert('Failed to send email. Please try again.');
    }
  } catch (error) {
    console.error('Error sending email:', error);
    alert('An error occurred while sending the email.');
  }
});


// Check for email check results on page load
document.addEventListener('DOMContentLoaded', function() {
  const urlParams = new URLSearchParams(window.location.search);
//   const emailCheck = urlParams.get('email_check');
  const emailMessage = urlParams.get('email_message');
  
  if (emailMessage !== null) {
    console.log("em1    Email check result found in URL:", emailCheck, emailMessage);
    const isSuccess = emailCheck === '1';
    const decodedMessage = decodeURIComponent(emailMessage || '');
    showNotification(decodedMessage, !isSuccess);
    
    // Clean up URL by removing the parameters
    const newUrl = window.location.pathname + window.location.hash;
    window.history.replaceState({}, document.title, newUrl);
  }
});
</script>

<%- include('../partials/footer') %>


<br>views/2/customer.ejs
