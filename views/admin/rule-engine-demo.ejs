<%- include('../partials/header') %>

    <!-- External CSS Dependencies -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    
    <style>
        /* ============================================
           CUSTOM STYLES FOR RULE ENGINE DEMO
           ============================================ */
        
        /* Rule Editor Styling */
        .rule-editor {
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 12px;
        }
        
        /* JSON Display Formatting */
        .json-display {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 1rem;
            white-space: pre-wrap;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 12px;
        }
        
        /* Test Result Styling */
        .test-result {
            margin-top: 1rem;
            padding: 1rem;
            border-radius: 0.375rem;
        }
        .test-success {
            background-color: #d1e7dd;
            border: 1px solid #badbcc;
            color: #0f5132;
        }
        .test-error {
            background-color: #f8d7da;
            border: 1px solid #f5c2c7;
            color: #842029;
        }
        
        /* Navigation Styling */
        .nav-pills .nav-link.active {
            background-color: #0d6efd;
        }
        
        /* Interactive Elements */
        .field-config-card {
            transition: all 0.3s ease;
        }
        .field-config-card:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        /* Visual Rule Builder Components */
        .condition-item {
            background-color: #f8f9fa;
            border-left: 4px solid #007bff !important;
        }
        
        .validation-item {
            background-color: #fff3cd;
            border-left: 4px solid #ffc107 !important;
            transition: all 0.3s ease;
        }

        .validation-item:hover {
            box-shadow: 0 2px 8px rgba(255, 193, 7, 0.3);
        }

        .validation-item[data-type="dataIntegrity"] {
            border-left-color: #dc3545 !important;
            background-color: #f8d7da;
        }

        .validation-item[data-type="businessRule"] {
            border-left-color: #fd7e14 !important;
            background-color: #ffeaa7;
        }

        .validation-item[data-type="security"] {
            border-left-color: #6f42c1 !important;
            background-color: #e2d9f3;
        }

        .validation-item[data-type="workflow"] {
            border-left-color: #20c997 !important;
            background-color: #d1ecf1;
        }
        
        /* Action Item Styling - Different colors for different action types */
        .action-item {
            background-color: #fff;
            border-left: 4px solid #28a745 !important;
            transition: all 0.3s ease;
        }
        .action-item:hover {
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        /* Workflow Job Styling */
        .workflow-job {
            background-color: #f8f9fa;
            border-left: 3px solid #ffc107 !important;
        }
        
        /* Color-coded action types for visual distinction */
        .action-item[data-type="updateStatus"] { border-left-color: #28a745 !important; }
        .action-item[data-type="updateRelatedStatus"] { border-left-color: #20c997 !important; }
        .action-item[data-type="addLog"] { border-left-color: #17a2b8 !important; }
        .action-item[data-type="createWorkflow"] { border-left-color: #ffc107 !important; }
        .action-item[data-type="notify"] { border-left-color: #007bff !important; }
        .action-item[data-type="updateDate"] { border-left-color: #6c757d !important; }
        
        /* Button Group Spacing */
        .btn-group-action {
            gap: 0.5rem;
        }
        
        /* Rule Builder Section Container */
        .rule-builder-section {
            border-radius: 0.5rem;
            border: 1px solid #dee2e6;
            background: #fff;
        }
    </style>
</head>
<body>
    <!-- ============================================
         MAIN APPLICATION CONTAINER
         ============================================ -->
    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-12">
                <h1 class="mb-4">
                    <i class="bi bi-gear"></i> Rule Engine Demo - Admin Dashboard
                    <small class="text-muted fs-6">Stage 1: Prototype & Testing</small>
                </h1>
                
                <!-- ============================================
                     DEMO MODE ALERT
                     ============================================ -->
                <div class="alert alert-info" role="alert">
                    <h5 class="alert-heading">Demo Mode Active</h5>
                    <p>This is a standalone demo of the new rule engine system. No production data will be modified.</p>
                    <hr>
                    <p class="mb-0">Use this interface to prototype and test trigger rules before integrating with the main application.</p>
                </div>
            </div>
        </div>

        <!-- ============================================
             MAIN NAVIGATION TABS
             ============================================ -->
        <ul class="nav nav-pills mb-4" id="adminTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="field-config-tab" data-bs-toggle="pill" data-bs-target="#field-config" type="button" role="tab">Field Configurations</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="rule-editor-tab" data-bs-toggle="pill" data-bs-target="#rule-editor" type="button" role="tab">Rule Editor</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="visual-builder-tab" data-bs-toggle="pill" data-bs-target="#visual-builder" type="button" role="tab">Visual Rule Builder</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="test-runner-tab" data-bs-toggle="pill" data-bs-target="#test-runner" type="button" role="tab">Test Runner</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="system-status-tab" data-bs-toggle="pill" data-bs-target="#system-status" type="button" role="tab">System Status</button>
            </li>
        </ul>

        <!-- ============================================
             TAB CONTENT CONTAINER
             ============================================ -->
        <div class="tab-content" id="adminTabContent">
            
            <!-- ============================================
                 FIELD CONFIGURATIONS TAB
                 ============================================
                 Manages field-level configuration for database
                 columns including validations and actions
                 ============================================ -->
            <div class="tab-pane fade show active" id="field-config" role="tabpanel">
                <div class="row">
                    <!-- Field Selection and Controls -->
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-header">
                                <h5>Field Configurations</h5>
                            </div>
                            <div class="card-body">
                                <!-- Field Selector Dropdown -->
                                <select class="form-select mb-3" id="fieldSelector">
                                    <option value="">Select a field...</option>
                                    <option value="jobTitle">Job Title</option>
                                    <option value="jobStatus">Job Status</option>
                                    <option value="taskTitle">Task Title</option>
                                    <option value="taskStatus">Task Status</option>
                                    <option value="customerName">Customer Name</option>
                                </select>
                                
                                <!-- Action Buttons -->
                                <button class="btn btn-primary btn-sm me-2" onclick="loadFieldConfig()">Load Config</button>
                                <button class="btn btn-success btn-sm me-2" onclick="saveFieldConfig()">Save Config</button>
                                <button class="btn btn-outline-secondary btn-sm" onclick="createNewField()">New Field</button>
                            </div>
                        </div>

                        <div class="card mt-3">
                            <div class="card-header">
                                <h6>Quick Actions</h6>
                            </div>
                            <div class="card-body">
                                <button class="btn btn-outline-primary btn-sm d-block w-100 mb-2" onclick="exportAllConfigs()">Export All</button>
                                <button class="btn btn-outline-warning btn-sm d-block w-100 mb-2" onclick="importConfigs()">Import</button>
                                <button class="btn btn-outline-danger btn-sm d-block w-100" onclick="resetToDefaults()">Reset to Defaults</button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-8">
                        <div class="card field-config-card">
                            <div class="card-header">
                                <h5>Field Configuration Editor</h5>
                                <small class="text-muted">Edit validation rules, actions, and behavior</small>
                            </div>
                            <div class="card-body">
                                <div id="fieldConfigEditor">
                                    <div class="alert alert-secondary text-center">
                                        Select a field from the left panel to edit its configuration
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Rule Editor Tab -->
            <div class="tab-pane fade" id="rule-editor" role="tabpanel">
                <div class="row">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h5>JSON Rule Editor</h5>
                            </div>
                            <div class="card-body">
                                <textarea class="form-control rule-editor" id="ruleJsonEditor" rows="20" placeholder="Enter JSON rule configuration here..."></textarea>
                                <div class="mt-3">
                                    <button class="btn btn-primary me-2" onclick="validateJson()">Validate JSON</button>
                                    <button class="btn btn-success me-2" onclick="previewRule()">Preview Rule</button>
                                    <button class="btn btn-outline-secondary" onclick="formatJson()">Format JSON</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h5>Rule Preview</h5>
                            </div>
                            <div class="card-body">
                                <div id="rulePreview" class="json-display">
                                    Rule preview will appear here...
                                </div>
                            </div>
                        </div>

                        <div class="card mt-3">
                            <div class="card-header">
                                <h6>Rule Templates</h6>
                            </div>
                            <div class="card-body">
                                <select class="form-select mb-2" id="ruleTemplate">
                                    <option value="">Select a template...</option>
                                    <option value="statusChange">Status Change Rule</option>
                                    <option value="fieldUpdate">Field Update Rule</option>
                                    <option value="workflow">Workflow Rule</option>
                                </select>
                                <button class="btn btn-outline-primary btn-sm" onclick="loadTemplate()">Load Template</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Visual Rule Builder Tab -->
            <div class="tab-pane fade" id="visual-builder" role="tabpanel">
                <div class="row">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5>Visual Rule Builder</h5>
                                <div>
                                    <button class="btn btn-outline-info btn-sm me-2" onclick="showImportRuleModal()">
                                        <i class="fas fa-upload"></i> Import JSON
                                    </button>
                                    <button class="btn btn-outline-primary btn-sm me-2" onclick="loadRuleTemplate('workflow')">Load Workflow Template</button>
                                    <button class="btn btn-success btn-sm me-2" onclick="generateRuleFromBuilder()">Generate Rule</button>
                                    <button class="btn btn-outline-secondary btn-sm" onclick="clearRuleBuilder()">Clear All</button>
                                </div>
                            </div>
                            <div class="card-body">
                                <!-- Rule Header -->
                                <div class="row mb-4">
                                    <div class="col-md-4">
                                        <label class="form-label fw-bold">Rule Name</label>
                                        <input type="text" class="form-control" id="rule-name" placeholder="e.g., Job Completion Workflow">
                                    </div>
                                    <div class="col-md-4">
                                        <label class="form-label fw-bold">Trigger Event</label>
                                        <select class="form-select" id="rule-trigger">
                                            <option value="">Select trigger...</option>
                                            <option value="current_status:complete">Status: Complete</option>
                                            <option value="current_status:pending">Status: Pending</option>
                                            <option value="current_status:active">Status: Active</option>
                                            <option value="field:changed">Field Changed</option>
                                            <option value="tier:changed">Tier Changed</option>
                                        </select>
                                    </div>
                                    <div class="col-md-4">
                                        <label class="form-label fw-bold">Description</label>
                                        <input type="text" class="form-control" id="rule-description" placeholder="Brief description of what this rule does">
                                    </div>
                                </div>

                                <!-- Conditions Section -->
                                <div class="mb-4">
                                    <h6 class="fw-bold mb-3">Conditions <small class="text-muted">(Optional - rule runs if ALL conditions are met)</small></h6>
                                    <div id="conditions-container">
                                        <div class="d-flex align-items-center mb-2">
                                            <button class="btn btn-outline-primary btn-sm" onclick="addCondition()">
                                                <i class="fas fa-plus"></i> Add Condition
                                            </button>
                                            <small class="text-muted ms-3">e.g., "Only run if tier > 500"</small>
                                        </div>
                                    </div>
                                </div>

                                <!-- Validation Section -->
                                <div class="mb-4">
                                    <h6 class="fw-bold mb-3">
                                        <i class="fas fa-shield-alt text-warning"></i> Validation Rules 
                                        <small class="text-muted">(Tests that must pass - blocks update if any fail)</small>
                                    </h6>
                                    <div id="validations-container">
                                        <div class="d-flex align-items-center mb-2">
                                            <button class="btn btn-outline-warning btn-sm" onclick="addValidation()">
                                                <i class="fas fa-plus"></i> Add Validation
                                            </button>
                                            <small class="text-muted ms-3">e.g., "Ensure customer has active subscription"</small>
                                        </div>
                                    </div>
                                </div>

                                <!-- Actions Section -->
                                <div class="mb-4">
                                    <h6 class="fw-bold mb-3">Actions <small class="text-muted">(What happens when the rule is triggered)</small></h6>
                                    <div id="actions-container">
                                        <div class="d-flex gap-2 mb-3">
                                            <button class="btn btn-outline-success btn-sm" onclick="addAction('updateStatus')">
                                                <i class="fas fa-edit"></i> Update Status
                                            </button>
                                            <button class="btn btn-outline-info btn-sm" onclick="addAction('addLog')">
                                                <i class="fas fa-file-alt"></i> Add Log Entry
                                            </button>
                                            <button class="btn btn-outline-warning btn-sm" onclick="addAction('createWorkflow')">
                                                <i class="fas fa-project-diagram"></i> Create Workflow
                                            </button>
                                            <button class="btn btn-outline-primary btn-sm" onclick="addAction('notify')">
                                                <i class="fas fa-bell"></i> Send Notification
                                            </button>
                                            <button class="btn btn-outline-secondary btn-sm" onclick="addAction('updateDate')">
                                                <i class="fas fa-calendar"></i> Update Date
                                            </button>
                                        </div>
                                        <div id="actions-list">
                                            <!-- Actions will be added here dynamically -->
                                        </div>
                                    </div>
                                </div>

                                <!-- Generated Rule Preview -->
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="fw-bold mb-0">Generated Rule JSON</h6>
                                        <div>
                                            <button class="btn btn-outline-info btn-sm me-1" onclick="copyGeneratedRuleToTestRunner()" title="Copy to Test Runner">
                                                <i class="fas fa-arrow-right"></i> Test
                                            </button>
                                            <button class="btn btn-outline-secondary btn-sm" onclick="copyGeneratedRuleToClipboard()" title="Copy to Clipboard">
                                                <i class="fas fa-copy"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="json-display" id="generated-rule-preview" style="max-height: 300px; overflow-y: auto;">
                                        Configure rule above to see generated JSON...
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Test Runner Tab -->
            <div class="tab-pane fade" id="test-runner" role="tabpanel">
                <div class="row">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h5>Test Rule Engine - Dry Run</h5>
                                <small class="text-muted">Paste a JSON rule from the Visual Builder to test the rule engine</small>
                            </div>
                            <div class="card-body">
                                <form id="testForm">
                                    <div class="mb-3">
                                        <label for="testRuleJson" class="form-label">Rule JSON</label>
                                        <textarea class="form-control" id="testRuleJson" rows="12" placeholder="Paste your rule JSON here...">{
  "on": "current_status:complete",
  "name": "Job Completion Workflow",
  "description": "Activate next job and update dates when current job completes",
  "conditions": [],
  "validations": [],
  "actions": [
    {
      "type": "updateRelatedStatus",
      "description": "Activate next job in workflow",
      "target": "next_job",
      "value": "active"
    },
    {
      "type": "updateDate",
      "description": "Set target date for next job",
      "field": "target_date",
      "value": "business_days_3",
      "target": "next_job"
    }
  ]
}</textarea>
                                    </div>
                                    
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="testTriggerField" class="form-label">Trigger Field</label>
                                                <select class="form-select" id="testTriggerField">
                                                    <option value="current_status">Job Status</option>
                                                    <option value="task_status">Task Status</option>
                                                    <option value="approval_status">Approval Status</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="testTriggerValue" class="form-label">New Value</label>
                                                <input type="text" class="form-control" id="testTriggerValue" value="complete" placeholder="Enter trigger value">
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="testRowID" class="form-label">Record ID</label>
                                                <input type="number" class="form-control" id="testRowID" value="123" placeholder="Enter record ID">
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="testUserID" class="form-label">User ID</label>
                                                <input type="number" class="form-control" id="testUserID" value="1" placeholder="Enter user ID">
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <button type="button" class="btn btn-primary" onclick="runRuleTest()">
                                        <i class="fas fa-play"></i> Execute Rule Test
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary" onclick="validateRuleJson()">
                                        <i class="fas fa-check-circle"></i> Validate JSON
                                    </button>
                                    <button type="button" class="btn btn-outline-info" onclick="copyRuleToVisualBuilder()">
                                        <i class="fas fa-copy"></i> Copy to Visual Builder
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary" onclick="clearTestResults()">Clear Results</button>
                                </form>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h5>Test Results</h5>
                            </div>
                            <div class="card-body">
                                <div id="testResults">
                                    <div class="alert alert-secondary text-center">
                                        Run a test to see results here
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- System Status Tab -->
            <div class="tab-pane fade" id="system-status" role="tabpanel">
                <!-- System Overview Cards -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card border-primary">
                            <div class="card-body text-center">
                                <i class="fas fa-database fa-2x text-primary mb-2"></i>
                                <h6 class="card-title">Job Templates</h6>
                                <h4 class="text-primary" id="jobTemplateCount">-</h4>
                                <small class="text-muted">Active templates</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-success">
                            <div class="card-body text-center">
                                <i class="fas fa-tasks fa-2x text-success mb-2"></i>
                                <h6 class="card-title">Active Jobs</h6>
                                <h4 class="text-success" id="activeJobCount">-</h4>
                                <small class="text-muted">Currently running</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-warning">
                            <div class="card-body text-center">
                                <i class="fas fa-cogs fa-2x text-warning mb-2"></i>
                                <h6 class="card-title">Rule Types</h6>
                                <h4 class="text-warning" id="ruleTypeCount">-</h4>
                                <small class="text-muted">Different rule patterns</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-info">
                            <div class="card-body text-center">
                                <i class="fas fa-shield-alt fa-2x text-info mb-2"></i>
                                <h6 class="card-title">Validations</h6>
                                <h4 class="text-info" id="validationCount">-</h4>
                                <small class="text-muted">Active checks</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Rule Analysis and Management -->
                <div class="row">
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5>Rule Analysis & Management</h5>
                                <div>
                                    <button class="btn btn-outline-primary btn-sm" onclick="analyzeSystemRules()">
                                        <i class="fas fa-search"></i> Analyze Rules
                                    </button>
                                    <button class="btn btn-outline-success btn-sm" onclick="validateAllRules()">
                                        <i class="fas fa-check-circle"></i> Validate All
                                    </button>
                                    <button class="btn btn-outline-warning btn-sm" onclick="exportRuleReport()">
                                        <i class="fas fa-download"></i> Export Report
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                <!-- Rule Type Tabs -->
                                <ul class="nav nav-pills mb-3" id="ruleTypeTabs" role="tablist">
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link active" id="status-rules-tab" data-bs-toggle="pill" data-bs-target="#status-rules" type="button" role="tab">
                                            Status Change Rules
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" id="workflow-rules-tab" data-bs-toggle="pill" data-bs-target="#workflow-rules" type="button" role="tab">
                                            Workflow Rules
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" id="validation-rules-tab" data-bs-toggle="pill" data-bs-target="#validation-rules" type="button" role="tab">
                                            Validation Rules
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" id="custom-rules-tab" data-bs-toggle="pill" data-bs-target="#custom-rules" type="button" role="tab">
                                            Custom Rules
                                        </button>
                                    </li>
                                </ul>

                                <!-- Rule Type Content -->
                                <div class="tab-content" id="ruleTypeContent">
                                    <!-- Status Change Rules -->
                                    <div class="tab-pane fade show active" id="status-rules" role="tabpanel">
                                        <div class="table-responsive">
                                            <table class="table table-sm table-hover">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th>Trigger</th>
                                                        <th>Template/Job Count</th>
                                                        <th>Actions</th>
                                                        <th>Status</th>
                                                        <th>Last Modified</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="statusRulesTable">
                                                    <tr>
                                                        <td colspan="6" class="text-center text-muted">
                                                            <i class="fas fa-spinner fa-spin"></i> Loading status change rules...
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>

                                    <!-- Workflow Rules -->
                                    <div class="tab-pane fade" id="workflow-rules" role="tabpanel">
                                        <div class="table-responsive">
                                            <table class="table table-sm table-hover">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th>Workflow Type</th>
                                                        <th>Template Count</th>
                                                        <th>Triggers</th>
                                                        <th>Next Jobs</th>
                                                        <th>Status</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="workflowRulesTable">
                                                    <tr>
                                                        <td colspan="6" class="text-center text-muted">
                                                            <i class="fas fa-spinner fa-spin"></i> Loading workflow rules...
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>

                                    <!-- Validation Rules -->
                                    <div class="tab-pane fade" id="validation-rules" role="tabpanel">
                                        <div class="table-responsive">
                                            <table class="table table-sm table-hover">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th>Validation Type</th>
                                                        <th>Field/Table</th>
                                                        <th>Check</th>
                                                        <th>Severity</th>
                                                        <th>Usage Count</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="validationRulesTable">
                                                    <tr>
                                                        <td colspan="6" class="text-center text-muted">
                                                            <i class="fas fa-spinner fa-spin"></i> Loading validation rules...
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>

                                    <!-- Custom Rules -->
                                    <div class="tab-pane fade" id="custom-rules" role="tabpanel">
                                        <div class="table-responsive">
                                            <table class="table table-sm table-hover">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th>Rule Name</th>
                                                        <th>Type</th>
                                                        <th>Trigger</th>
                                                        <th>Target</th>
                                                        <th>Status</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="customRulesTable">
                                                    <tr>
                                                        <td colspan="6" class="text-center text-muted">
                                                            <i class="fas fa-spinner fa-spin"></i> Loading custom rules...
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- System Status Sidebar -->
                    <div class="col-md-4">
                        <!-- Rule Engine Status -->
                        <div class="card mb-3">
                            <div class="card-header">
                                <h6>Rule Engine Status</h6>
                            </div>
                            <div class="card-body">
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Status:</span>
                                    <span class="badge bg-success" id="engineStatus">Active</span>
                                </div>
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Version:</span>
                                    <span id="engineVersion">2.0.0</span>
                                </div>
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Last Sync:</span>
                                    <span id="lastSync">-</span>
                                </div>
                                <div class="d-flex justify-content-between">
                                    <span>Performance:</span>
                                    <span class="badge bg-info" id="performance">Good</span>
                                </div>
                            </div>
                        </div>

                        <!-- Database Health -->
                        <div class="card mb-3">
                            <div class="card-header">
                                <h6>Database Health</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-2">
                                    <div class="d-flex justify-content-between">
                                        <small>Jobs Table</small>
                                        <span class="badge bg-success" id="jobsTableStatus">Healthy</span>
                                    </div>
                                    <div class="progress progress-sm">
                                        <div class="progress-bar bg-success" style="width: 98%"></div>
                                    </div>
                                </div>
                                <div class="mb-2">
                                    <div class="d-flex justify-content-between">
                                        <small>Job Templates</small>
                                        <span class="badge bg-success" id="templatesTableStatus">Healthy</span>
                                    </div>
                                    <div class="progress progress-sm">
                                        <div class="progress-bar bg-success" style="width: 95%"></div>
                                    </div>
                                </div>
                                <div class="mb-2">
                                    <div class="d-flex justify-content-between">
                                        <small>Rule Configurations</small>
                                        <span class="badge bg-warning" id="rulesTableStatus">Warning</span>
                                    </div>
                                    <div class="progress progress-sm">
                                        <div class="progress-bar bg-warning" style="width: 87%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Quick Actions -->
                        <div class="card mb-3">
                            <div class="card-header">
                                <h6>Quick Actions</h6>
                            </div>
                            <div class="card-body">
                                <div class="d-grid gap-2">
                                    <button class="btn btn-outline-primary btn-sm" onclick="refreshSystemData()">
                                        <i class="fas fa-sync-alt"></i> Refresh Data
                                    </button>
                                    <button class="btn btn-outline-success btn-sm" onclick="createNewRule()">
                                        <i class="fas fa-plus"></i> Create New Rule
                                    </button>
                                    <button class="btn btn-outline-warning btn-sm" onclick="showRuleConflicts()">
                                        <i class="fas fa-exclamation-triangle"></i> Check Conflicts
                                    </button>
                                    <button class="btn btn-outline-info btn-sm" onclick="optimizeRules()">
                                        <i class="fas fa-magic"></i> Optimize Rules
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Recent Activity -->
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">Recent Activity</h6>
                                <button class="btn btn-outline-secondary btn-sm" onclick="clearActivityLog()" title="Clear Log">
                                    <i class="fas fa-eraser"></i>
                                </button>
                            </div>
                            <div class="card-body">
                                <div id="activityLog" style="max-height: 200px; overflow-y: auto;">
                                    <small class="text-muted">Activity log will appear here...</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Job Selection Modal -->
    <div class="modal fade" id="jobSelectionModal" tabindex="-1" aria-labelledby="jobSelectionModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="jobSelectionModalLabel">Select Job Template or Specific Job</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="jobSelectionForm">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6>Selection Type</h6>
                                <div class="btn-group w-100" role="group">
                                    <input type="radio" class="btn-check" name="jobSelectionType" id="templateRadio" value="template" checked onchange="toggleJobSelectionType()">
                                    <label class="btn btn-outline-primary" for="templateRadio">Product Template</label>
                                    
                                    <input type="radio" class="btn-check" name="jobSelectionType" id="customerRadio" value="customer" onchange="toggleJobSelectionType()">
                                    <label class="btn btn-outline-primary" for="customerRadio">Customer Job</label>
                                </div>
                            </div>
                        </div>

                        <!-- Product Template Selection -->
                        <div id="templateSelection" class="job-selection-section">
                            <div class="row">
                                <div class="col-md-6">
                                    <label class="form-label">Product Template</label>
                                    <select class="form-select" id="modalProductSelect" onchange="loadProductSteps()">
                                        <option value="">Select Product...</option>
                                        <option value="1">Quality Assurance Package</option>
                                        <option value="2">Customer Satisfaction Survey</option>
                                        <option value="3">Maintenance Follow-up</option>
                                        <option value="4">Upsell Assessment</option>
                                        <option value="5">Training & Support</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Template Step</label>
                                    <select class="form-select" id="modalTemplateStepSelect">
                                        <option value="">Select Step...</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Customer Job Selection -->
                        <div id="customerJobSelection" class="job-selection-section" style="display: none;">
                            <div class="row">
                                <div class="col-md-6">
                                    <label class="form-label">Customer Job</label>
                                    <select class="form-select" id="modalCustomerJobSelect" onchange="loadCustomerJobSteps()">
                                        <option value="">Select Customer Job...</option>
                                        <option value="job_123">John Smith - Quality Package Job</option>
                                        <option value="job_456">Sarah Johnson - Maintenance Job</option>
                                        <option value="job_789">Tech Corp - Support Job</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Job Step</label>
                                    <select class="form-select" id="modalJobStepSelect">
                                        <option value="">Select Step...</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Additional Context -->
                        <div class="row mt-3">
                            <div class="col-md-12">
                                <label class="form-label">Relationship Description</label>
                                <input type="text" class="form-control" id="modalRelationshipDesc" placeholder="e.g., Quality check for this job">
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="applyJobSelection()">Apply Selection</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Import Rule JSON Modal -->
    <div class="modal fade" id="importRuleModal" tabindex="-1" aria-labelledby="importRuleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="importRuleModalLabel">Import Rule JSON</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="importRuleJsonTextarea" class="form-label">Paste Rule JSON</label>
                        <textarea class="form-control" id="importRuleJsonTextarea" rows="12" placeholder="Paste your rule JSON here...">{
  "on": "current_status:complete",
  "name": "Job Completion Workflow",
  "description": "Activate next job and update dates when current job completes",
  "conditions": [],
  "validations": [],
  "actions": [
    {
      "type": "updateDate",
      "description": "Update date field",
      "field": "target_date",
      "value": "today_plus_1",
      "target": "next_job"
    },
    {
      "type": "updateRelatedStatus",
      "description": "Update status",
      "target": "next_job",
      "value": "pending"
    }
  ]
}</textarea>
                        <div class="form-text">Copy rule JSON from the Test Runner or any other source to load it into the visual builder.</div>
                    </div>
                    <div class="mb-3">
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="validateImportJson()">
                            <i class="fas fa-check"></i> Validate JSON
                        </button>
                        <button type="button" class="btn btn-outline-info btn-sm" onclick="formatImportJson()">
                            <i class="fas fa-magic"></i> Format JSON
                        </button>
                    </div>
                    <div id="importValidationResult" class="alert d-none" role="alert"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="importRuleToBuilder()">
                        <i class="fas fa-upload"></i> Import to Visual Builder
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- External JavaScript Dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-json.min.js"></script>
    
    <script>
        /* ============================================
           RULE ENGINE DEMO APPLICATION
           ============================================
           
           This application provides a comprehensive demo environment for:
           1. Field Configuration Management
           2. Rule Creation and Editing
           3. Visual Rule Building
           4. Rule Testing and Validation
           5. System Status Monitoring
           
           ============================================ */

        /* ============================================
           DEMO DATA CONFIGURATIONS
           ============================================ */
        
        // Demo field configurations - represents database field settings
        // with validation rules and post-action triggers
        const fieldConfigs = {
            'jobTitle': {
                table: 'jobs',
                column: 'display_text',
                validations: [
                    { type: 'required' },
                    { type: 'maxLength', value: 126 }
                ],
                encoding: 'uri',
                preActions: [],
                postActions: [
                    {
                        type: 'notify',
                        condition: 'always',
                        params: { message: 'Job title updated' }
                    }
                ]
            },
            'jobStatus': {
                table: 'jobs',
                column: 'current_status',
                validations: [{ type: 'required' }],
                preActions: [],
                postActions: [
                    {
                        type: 'updateDate',
                        condition: { field: 'current_status', value: 'complete' },
                        params: { table: 'jobs', column: 'completed_date', value: 'now' }
                    },
                    {
                        type: 'executeWorkflow',
                        condition: 'always',
                        params: { triggerField: 'change_array' }
                    }
                ]
            },
            'taskTitle': {
                table: 'tasks',
                column: 'display_text',
                validations: [
                    { type: 'required' },
                    { type: 'maxLength', value: 126 }
                ],
                encoding: 'uri',
                preActions: [],
                postActions: []
            },
            'taskStatus': {
                table: 'tasks',
                column: 'current_status',
                validations: [{ type: 'required' }],
                preActions: [],
                postActions: [
                    {
                        type: 'notify',
                        condition: { field: 'current_status', value: 'complete' },
                        params: { message: 'Task completed!' }
                    }
                ]
            },
            'customerName': {
                table: 'customers',
                column: 'full_name',
                validations: [
                    { type: 'required' },
                    { type: 'maxLength', value: 255 }
                ],
                encoding: 'uri',
                preActions: [],
                postActions: []
            }
        };

        let currentFieldConfig = null;

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            updateConfigSummary();
            logActivity('Demo system initialized', 'success');
            
            // Check for debug mode
            if (window.location.hash === '#debug' || window.localStorage.getItem('rule-engine-debug') === 'true') {
                console.log('🐛 Debug mode activated');
                logActivity('🐛 Debug mode activated - Enhanced logging enabled', 'debug');
                window.enableRuleEngineDebug = function() {
                    window.localStorage.setItem('rule-engine-debug', 'true');
                    logActivity('🐛 Debug mode enabled via console', 'debug');
                };
                window.disableRuleEngineDebug = function() {
                    window.localStorage.removeItem('rule-engine-debug');
                    logActivity('🐛 Debug mode disabled via console', 'debug');
                };
                console.log('Available debug commands: enableRuleEngineDebug(), disableRuleEngineDebug()');
            }
        });

        /* ============================================
           FIELD CONFIGURATION MANAGEMENT FUNCTIONS
           ============================================ */

        /**
         * Load field configuration for editing
         * Retrieves the selected field's configuration and displays it in the editor
         */
        function loadFieldConfig() {
            const fieldID = document.getElementById('fieldSelector').value;
            if (!fieldID) {
                alert('Please select a field first');
                return;
            }

            currentFieldConfig = fieldID;
            const config = fieldConfigs[fieldID];
            
            if (!config) {
                alert('Configuration not found');
                return;
            }

            displayFieldConfigEditor(fieldID, config);
            logActivity(`Loaded configuration for ${fieldID}`);
        }

        /**
         * Display the field configuration editor with current settings
         * Renders a dynamic form with all field configuration options
         * @param {string} fieldID - The field identifier
         * @param {object} config - The field configuration object
         */
        function displayFieldConfigEditor(fieldID, config) {
            const editor = document.getElementById('fieldConfigEditor');
            
            editor.innerHTML = `
                <h6>Editing: ${fieldID}</h6>
                <hr>
                
                <div class="row">
                    <!-- Basic Field Settings -->
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Table</label>
                            <input type="text" class="form-control" id="configTable" value="${config.table}">
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Column</label>
                            <input type="text" class="form-control" id="configColumn" value="${config.column}">
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Encoding</label>
                            <select class="form-select" id="configEncoding">
                                <option value="none" ${config.encoding === 'none' ? 'selected' : ''}>None</option>
                                <option value="uri" ${config.encoding === 'uri' ? 'selected' : ''}>URI</option>
                                <option value="html" ${config.encoding === 'html' ? 'selected' : ''}>HTML</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Validation Rules -->
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Validations</label>
                            <div id="validationsList">
                                ${config.validations.map((v, i) => `
                                    <div class="input-group mb-1">
                                        <select class="form-select">
                                            <option value="required" ${v.type === 'required' ? 'selected' : ''}>Required</option>
                                            <option value="maxLength" ${v.type === 'maxLength' ? 'selected' : ''}>Max Length</option>
                                            <option value="email" ${v.type === 'email' ? 'selected' : ''}>Email</option>
                                            <option value="date" ${v.type === 'date' ? 'selected' : ''}>Date</option>
                                        </select>
                                        <input type="text" class="form-control" value="${v.value || ''}" placeholder="Value (if needed)">
                                        <button class="btn btn-outline-danger btn-sm" onclick="removeValidation(${i})">×</button>
                                    </div>
                                `).join('')}
                            </div>
                            <button class="btn btn-outline-primary btn-sm" onclick="addValidation()">Add Validation</button>
                        </div>
                    </div>
                </div>
                
                <div class="row">
                    <div class="col-12">
                        <div class="mb-3">
                            <label class="form-label">Post Actions (JSON)</label>
                            <textarea class="form-control" id="configPostActions" rows="8">${JSON.stringify(config.postActions, null, 2)}</textarea>
                        </div>
                    </div>
                </div>
            `;
        }

        function saveFieldConfig() {
            if (!currentFieldConfig) {
                alert('No field selected for editing');
                return;
            }

            const table = document.getElementById('configTable').value;
            const column = document.getElementById('configColumn').value;
            const encoding = document.getElementById('configEncoding').value;
            const postActionsText = document.getElementById('configPostActions').value;

            try {
                const postActions = JSON.parse(postActionsText);
                
                fieldConfigs[currentFieldConfig] = {
                    ...fieldConfigs[currentFieldConfig],
                    table,
                    column,
                    encoding,
                    postActions
                };

                alert('Configuration saved successfully');
                updateConfigSummary();
                logActivity(`Saved configuration for ${currentFieldConfig}`);
            } catch (error) {
                alert('Invalid JSON in post actions: ' + error.message);
            }
        }

        function validateRuleJson() {
            const ruleJson = document.getElementById('testRuleJson').value;
            try {
                const rule = JSON.parse(ruleJson);
                
                // Basic validation
                if (!rule.on) {
                    throw new Error('Rule must have "on" trigger property');
                }
                if (!rule.actions || !Array.isArray(rule.actions)) {
                    throw new Error('Rule must have "actions" array');
                }
                
                alert('✅ Rule JSON is valid and ready for testing!');
                logActivity('Rule JSON validation passed');
            } catch (error) {
                alert('❌ Invalid Rule JSON: ' + error.message);
                logActivity('Rule JSON validation failed: ' + error.message);
            }
        }

        function runRuleTest() {
            const ruleJson = document.getElementById('testRuleJson').value;
            const triggerField = document.getElementById('testTriggerField').value;
            const triggerValue = document.getElementById('testTriggerValue').value;
            const rowID = document.getElementById('testRowID').value;
            const userID = document.getElementById('testUserID').value;

            try {
                const rule = JSON.parse(ruleJson);
                
                // Simulate rule engine execution
                const testResult = simulateRuleExecution(rule, {
                    triggerField,
                    triggerValue,
                    rowID,
                    userID
                });

                displayRuleTestResults(testResult);
                logActivity(`Rule test executed: ${rule.name || 'Unnamed Rule'}`);
            } catch (error) {
                const errorResult = {
                    success: false,
                    error: error.message,
                    rule: null,
                    context: { triggerField, triggerValue, rowID, userID }
                };
                displayRuleTestResults(errorResult);
                logActivity(`Rule test failed: ${error.message}`);
            }
        }

        /* ============================================
           RULE EXECUTION SIMULATION ENGINE
           ============================================ */

        /**
         * Simulate rule execution for testing purposes
         * This function mimics the actual rule engine behavior for demo purposes
         * @param {object} rule - The rule configuration object
         * @param {object} context - The execution context (trigger, user, record)
         * @returns {object} Execution result with success status and details
         */
        function simulateRuleExecution(rule, context) {
            const startTime = performance.now();
            
            // Step 1: Check if trigger matches the rule's trigger condition
            const triggerMatch = rule.on === `${context.triggerField}:${context.triggerValue}` || 
                                 rule.on === context.triggerField;
            
            if (!triggerMatch) {
                return {
                    success: false,
                    triggered: false,
                    rule: rule,
                    context: context,
                    message: `Rule trigger "${rule.on}" does not match "${context.triggerField}:${context.triggerValue}"`,
                    executionTime: performance.now() - startTime
                };
            }

            // Step 2: Evaluate all conditions defined in the rule
            const conditionResults = rule.conditions?.map(condition => {
                const conditionDesc = `${condition.field} ${condition.operator} ${condition.value}`;
                let passed = false;
                
                // Simulate condition evaluation (in production, this would query actual data)
                switch (condition.operator) {
                    case 'equals':
                        passed = true; // For demo, assume field values match expectations
                        break;
                    case 'not_equals':
                        passed = true;
                        break;
                    case 'greater_than':
                        passed = true; // Assume dates/numbers are greater
                        break;
                    case 'less_than':
                        // For date fields like target_date, assume current date logic
                        if (condition.field === 'target_date' && condition.value === 'Today') {
                            passed = true; // Target date is in the past, so condition passes
                        } else {
                            passed = true;
                        }
                        break;
                    case 'contains':
                        passed = true;
                        break;
                    case 'is_null':
                        passed = false; // Usually fields have values
                        break;
                    case 'is_not_null':
                        passed = true; // Usually fields have values
                        break;
                    default:
                        passed = true; // Default to passing for unknown operators
                }
                
                return {
                    condition: conditionDesc,
                    passed: passed,
                    jobContext: condition.jobContext || 'current'
                };
            }) || [];

            const allConditionsPassed = conditionResults.length === 0 || conditionResults.every(c => c.passed);

            // Simulate validation checking with basic logic
            const validationResults = rule.validations?.map(validation => {
                let passed = true;
                
                // Basic validation logic
                switch (validation.check) {
                    case 'field_not_empty':
                        passed = true; // Assume fields have values
                        break;
                    case 'field_matches':
                        passed = true; // Assume field matches expected value
                        break;
                    case 'customer_active':
                        passed = true; // Assume customer is active
                        break;
                    case 'has_permission':
                        passed = true; // Assume user has permission
                        break;
                    case 'workflow_allows':
                        passed = true; // Assume workflow allows the change
                        break;
                    case 'data_consistent':
                        passed = true; // Assume data is consistent
                        break;
                    default:
                        passed = true; // Default to passing
                }
                
                return {
                    type: validation.type || 'businessRule',
                    check: validation.check,
                    passed: passed,
                    severity: validation.severity || 'error'
                };
            }) || [];

            const allValidationsPassed = validationResults.length === 0 || validationResults.every(v => v.passed);

            // Simulate action execution with logic-based success
            const actionResults = rule.actions?.map(action => {
                // Most actions should succeed in a properly configured system
                let actionSuccess = true;
                
                // Only fail actions in specific edge cases
                if (action.type === 'createWorkflow' && !action.template) {
                    actionSuccess = false; // Fail if no template specified
                } else if (action.type === 'updateStatus' && !action.value) {
                    actionSuccess = false; // Fail if no status value specified
                }
                
                return {
                    type: action.type,
                    description: action.description || `Execute ${action.type}`,
                    target: action.target || 'current_job',
                    value: action.value,
                    field: action.field,
                    status: actionSuccess ? 'success' : 'failed',
                    details: generateActionDetails(action)
                };
            }) || [];

            const allActionsSuccessful = actionResults.every(a => a.status === 'success');
            const overallSuccess = allConditionsPassed && allValidationsPassed && allActionsSuccessful;

            return {
                success: overallSuccess,
                triggered: true,
                rule: rule,
                context: context,
                conditionResults: conditionResults,
                validationResults: validationResults,
                actionResults: actionResults,
                executionTime: performance.now() - startTime,
                summary: {
                    conditionsChecked: conditionResults.length,
                    conditionsPassed: conditionResults.filter(c => c.passed).length,
                    validationsChecked: validationResults.length,
                    validationsPassed: validationResults.filter(v => v.passed).length,
                    actionsExecuted: actionResults.length,
                    actionsSuccessful: actionResults.filter(a => a.status === 'success').length
                }
            };
        }

        function generateActionDetails(action) {
            const details = [];
            
            switch (action.type) {
                case 'updateRelatedStatus':
                case 'updateStatus':
                    details.push(`Target: ${action.target || 'current_job'}`);
                    details.push(`New Status: ${action.value}`);
                    if (action.jobIdentifier) {
                        details.push(`Job Identifier: ${JSON.stringify(action.jobIdentifier)}`);
                    }
                    break;
                    
                case 'updateDate':
                    details.push(`Target: ${action.target || 'current_job'}`);
                    details.push(`Field: ${action.field}`);
                    details.push(`Value: ${action.value}`);
                    break;
                    
                case 'addLogEntry':
                case 'addLog':
                    details.push(`Message: ${action.message || 'Log entry'}`);
                    details.push(`Level: ${action.level || 'info'}`);
                    break;
                    
                case 'createWorkflow':
                    details.push(`Template: ${action.template?.product_id || 'Unknown'}`);
                    details.push(`Customer: ${action.target?.customer_id || 'Current'}`);
                    break;
                    
                case 'notify':
                    details.push(`Type: ${action.notificationType || 'system'}`);
                    details.push(`To: ${action.to || 'user'}`);
                    break;
            }
            
            return details;
        }

        function displayRuleTestResults(result) {
            const resultsDiv = document.getElementById('testResults');
            
            if (!result.success && result.error) {
                // JSON parsing or other error
                resultsDiv.innerHTML = `
                    <div class="test-result test-error">
                        <h6><i class="fas fa-exclamation-triangle"></i> Test Failed - JSON Error</h6>
                        <div class="alert alert-danger">
                            <strong>Error:</strong> ${result.error}
                        </div>
                        <p><strong>Context:</strong> ${result.context?.triggerField}:${result.context?.triggerValue}</p>
                    </div>
                `;
                return;
            }

            if (!result.triggered) {
                // Rule didn't trigger
                resultsDiv.innerHTML = `
                    <div class="test-result test-warning">
                        <h6><i class="fas fa-info-circle"></i> Rule Not Triggered</h6>
                        <div class="alert alert-warning">
                            <strong>Reason:</strong> ${result.message}
                        </div>
                        <p><strong>Rule Name:</strong> ${result.rule?.name || 'Unnamed'}</p>
                        <p><strong>Expected Trigger:</strong> ${result.rule?.on}</p>
                        <p><strong>Actual Trigger:</strong> ${result.context?.triggerField}:${result.context?.triggerValue}</p>
                    </div>
                `;
                return;
            }

            const statusClass = result.success ? 'test-success' : 'test-error';
            const statusIcon = result.success ? 'fas fa-check-circle' : 'fas fa-times-circle';
            
            resultsDiv.innerHTML = `
                <div class="test-result ${statusClass}">
                    <h6><i class="${statusIcon}"></i> Rule Test Result: ${result.success ? 'Success' : 'Failed'}</h6>
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p><strong>Rule:</strong> ${result.rule?.name || 'Unnamed Rule'}</p>
                            <p><strong>Trigger:</strong> ${result.rule?.on}</p>
                            <p><strong>Context:</strong> Record ${result.context?.rowID}, User ${result.context?.userID}</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Execution Time:</strong> ${result.executionTime?.toFixed(2)}ms</p>
                            <p><strong>Change:</strong> ${result.context?.triggerField} → ${result.context?.triggerValue}</p>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4">
                            <h6 class="mt-3">Conditions (${result.summary?.conditionsPassed}/${result.summary?.conditionsChecked})</h6>
                            ${result.conditionResults?.length > 0 ? `
                                <ul class="list-unstyled">
                                    ${result.conditionResults.map(c => 
                                        `<li class="${c.passed ? 'text-success' : 'text-danger'}">
                                            <i class="fas ${c.passed ? 'fa-check' : 'fa-times'}"></i> 
                                            ${c.condition}
                                            ${c.jobContext !== 'current' ? ` (${c.jobContext})` : ''}
                                        </li>`
                                    ).join('')}
                                </ul>
                            ` : '<p class="text-muted">No conditions to check</p>'}
                        </div>
                        
                        <div class="col-md-4">
                            <h6 class="mt-3">Validations (${result.summary?.validationsPassed}/${result.summary?.validationsChecked})</h6>
                            ${result.validationResults?.length > 0 ? `
                                <ul class="list-unstyled">
                                    ${result.validationResults.map(v => 
                                        `<li class="${v.passed ? 'text-success' : 'text-danger'}">
                                            <i class="fas ${v.passed ? 'fa-check' : 'fa-times'}"></i> 
                                            ${v.check} (${v.type})
                                            ${v.severity === 'critical' ? ' <span class="badge bg-danger">Critical</span>' : ''}
                                        </li>`
                                    ).join('')}
                                </ul>
                            ` : '<p class="text-muted">No validations to check</p>'}
                        </div>
                        
                        <div class="col-md-4">
                            <h6 class="mt-3">Actions (${result.summary?.actionsSuccessful}/${result.summary?.actionsExecuted})</h6>
                            ${result.actionResults?.length > 0 ? `
                                <ul class="list-unstyled">
                                    ${result.actionResults.map(a => 
                                        `<li class="${a.status === 'success' ? 'text-success' : 'text-danger'}">
                                            <i class="fas ${a.status === 'success' ? 'fa-check' : 'fa-times'}"></i> 
                                            <strong>${a.type}</strong><br>
                                            <small class="text-muted">${a.description}</small><br>
                                            ${a.details?.map(d => `<small class="text-muted">• ${d}</small>`).join('<br>') || ''}
                                        </li>`
                                    ).join('')}
                                </ul>
                            ` : '<p class="text-muted">No actions to execute</p>'}
                        </div>
                    </div>

                    ${result.rule?.description ? `
                        <div class="mt-3">
                            <h6>Rule Description</h6>
                            <p class="text-muted">${result.rule.description}</p>
                        </div>
                    ` : ''}
                </div>
            `;
        }

        function displayTestResults(result) {
            // Legacy function - keeping for compatibility
            displayRuleTestResults(result);
        }

        function clearTestResults() {
            document.getElementById('testResults').innerHTML = `
                <div class="alert alert-secondary text-center">
                    Run a test to see results here
                </div>
            `;
        }

        function updateConfigSummary() {
            const tbody = document.getElementById('configSummary');
            tbody.innerHTML = Object.entries(fieldConfigs).map(([fieldID, config]) => `
                <tr>
                    <td><code>${fieldID}</code></td>
                    <td>${config.table}</td>
                    <td>${config.column}</td>
                    <td><span class="badge bg-secondary">${config.validations.length}</span></td>
                    <td><span class="badge bg-secondary">${config.preActions.length}</span></td>
                    <td><span class="badge bg-secondary">${config.postActions.length}</span></td>
                    <td><span class="badge bg-success">Active</span></td>
                </tr>
            `).join('');

            document.getElementById('configCount').textContent = Object.keys(fieldConfigs).length;
        }

        function logActivity(message, level = 'info') {
            const log = document.getElementById('activityLog');
            if (!log) {
                console.warn('⚠️ Activity log element not found');
                return;
            }
            
            const timestamp = new Date().toLocaleTimeString();
            
            // Determine icon and color based on log level
            let icon = 'fas fa-info-circle';
            let colorClass = 'text-info';
            let consoleMethod = 'log';
            
            switch (level) {
                case 'error':
                    icon = 'fas fa-exclamation-triangle';
                    colorClass = 'text-danger';
                    consoleMethod = 'error';
                    break;
                case 'warning':
                    icon = 'fas fa-exclamation-circle';
                    colorClass = 'text-warning';
                    consoleMethod = 'warn';
                    break;
                case 'success':
                    icon = 'fas fa-check-circle';
                    colorClass = 'text-success';
                    consoleMethod = 'log';
                    break;
                case 'debug':
                    icon = 'fas fa-bug';
                    colorClass = 'text-secondary';
                    consoleMethod = 'debug';
                    break;
                default: // info
                    icon = 'fas fa-info-circle';
                    colorClass = 'text-info';
                    consoleMethod = 'log';
            }
            
            // Log to console with appropriate method
            console[consoleMethod](`[${timestamp}] ${message}`);
            
            // Create visual log entry
            const entry = `
                <div class="mb-1 activity-log-entry" data-level="${level}">
                    <small class="text-muted">${timestamp}</small> 
                    <i class="${icon} ${colorClass}" title="${level}"></i>
                    <span class="${colorClass}">${message}</span>
                </div>
            `;
            
            log.innerHTML = entry + log.innerHTML;
            
            // Keep only last 15 entries (increased from 10 for better debugging)
            const entries = log.children;
            while (entries.length > 15) {
                log.removeChild(entries[entries.length - 1]);
            }
        }

        function clearActivityLog() {
            const log = document.getElementById('activityLog');
            if (log) {
                log.innerHTML = '<small class="text-muted">Activity log cleared...</small>';
                console.log('🧹 Activity log cleared');
            }
        }

        let consoleMode = false;
        function toggleConsoleMode() {
            consoleMode = !consoleMode;
            const log = document.getElementById('activityLog');
            if (!log) return;
            
            if (consoleMode) {
                log.style.fontFamily = 'monospace';
                log.style.fontSize = '12px';
                log.style.backgroundColor = '#1e1e1e';
                log.style.color = '#ffffff';
                log.style.padding = '10px';
                log.style.borderRadius = '4px';
                logActivity('🖥️ Console mode enabled', 'debug');
            } else {
                log.style.fontFamily = '';
                log.style.fontSize = '';
                log.style.backgroundColor = '';
                log.style.color = '';
                log.style.padding = '';
                log.style.borderRadius = '';
                logActivity('📱 Normal mode enabled', 'debug');
            }
        }

        function addDebugInfo(context, data) {
            if (window.location.hash === '#debug' || window.localStorage.getItem('rule-engine-debug') === 'true') {
                console.group(`🐛 Debug: ${context}`);
                console.log('Data:', data);
                console.log('DOM State:', {
                    conditionCounter,
                    actionCounter,
                    validationCounter,
                    activeTab: document.querySelector('.nav-link.active')?.textContent
                });
                console.groupEnd();
                logActivity(`🐛 Debug: ${context} - See console for details`, 'debug');
            }
        }

        function validateJson() {
            const jsonText = document.getElementById('ruleJsonEditor').value;
            try {
                JSON.parse(jsonText);
                alert('JSON is valid!');
            } catch (error) {
                alert('Invalid JSON: ' + error.message);
            }
        }

        function formatJson() {
            const editor = document.getElementById('ruleJsonEditor');
            try {
                const parsed = JSON.parse(editor.value);
                editor.value = JSON.stringify(parsed, null, 2);
            } catch (error) {
                alert('Cannot format invalid JSON');
            }
        }

        function previewRule() {
            const jsonText = document.getElementById('ruleJsonEditor').value;
            try {
                const parsed = JSON.parse(jsonText);
                document.getElementById('rulePreview').textContent = JSON.stringify(parsed, null, 2);
            } catch (error) {
                document.getElementById('rulePreview').textContent = 'Invalid JSON: ' + error.message;
            }
        }

        function exportAllConfigs() {
            const dataStr = JSON.stringify(fieldConfigs, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'field-configs-export.json';
            link.click();
            logActivity('Exported all configurations');
        }

        /* ============================================
           VISUAL RULE BUILDER FUNCTIONS
           ============================================
           
           These functions power the drag-and-drop visual
           rule builder interface, allowing users to create
           complex rules without writing JSON
           
           ============================================ */

        // Global counters for generating unique IDs
        let conditionCounter = 0;  // Tracks condition elements
        let actionCounter = 0;     // Tracks action elements
        let validationCounter = 0; // Tracks validation elements

        /**
         * Update condition fields based on job context selection
         * Shows/hides relevant form fields based on the selected job context
         * @param {HTMLElement} selectElement - The job context select element
         * @param {number} conditionId - The unique condition ID
         */
        function updateConditionFields(selectElement, conditionId) {
            const jobContext = selectElement.value;
            const conditionDiv = selectElement.closest('.condition-item');
            const jobSelector = conditionDiv.querySelector('.condition-job-selector');
            const jobDetails = conditionDiv.querySelector('.condition-job-details');
            const jobValueDiv = conditionDiv.querySelector('.condition-job-value');
            const templateStepDiv = conditionDiv.querySelector('.condition-template-step');
            const jobStepDiv = conditionDiv.querySelector('.condition-job-step');
            
            if (jobContext === 'current') {
                // Current job context - hide all job-specific controls
                jobSelector.style.display = 'none';
                jobDetails.style.display = 'none';
                if (jobValueDiv) jobValueDiv.style.display = 'none';
                if (templateStepDiv) templateStepDiv.style.display = 'none';
                if (jobStepDiv) jobStepDiv.style.display = 'none';
            } else if (jobContext === 'next') {
                // Next job context - automatic determination, no manual selection needed
                jobSelector.style.display = 'none';
                jobDetails.style.display = 'none';
                if (jobValueDiv) jobValueDiv.style.display = 'none';
                if (templateStepDiv) templateStepDiv.style.display = 'none';
                if (jobStepDiv) jobStepDiv.style.display = 'none';
                
                // Add informational note for user clarity
                const noteDiv = conditionDiv.querySelector('.next-job-note');
                if (!noteDiv) {
                    const noteHtml = '<div class="next-job-note"><small class="text-muted"><i class="fas fa-info-circle"></i> Next job will be automatically determined by workflow sequence</small></div>';
                    conditionDiv.insertAdjacentHTML('beforeend', noteHtml);
                }
            } else if (jobContext === 'specific') {
                // Specific job context - show job selection controls
                jobSelector.style.display = 'block';
                jobDetails.style.display = 'flex';
                if (jobValueDiv) jobValueDiv.style.display = 'block';
                
                // Remove next job note if it exists
                const noteDiv = conditionDiv.querySelector('.next-job-note');
                if (noteDiv) noteDiv.remove();
            } else {
                // Other contexts (preceding, related) - show all controls
                jobSelector.style.display = 'block';
                jobDetails.style.display = 'flex';
                if (jobValueDiv) jobValueDiv.style.display = 'block';
                
                // Remove next job note if it exists
                const noteDiv = conditionDiv.querySelector('.next-job-note');
                if (noteDiv) noteDiv.remove();
            }
            
            updateJsonPreview();
        }

        function updateJobIdentifierType(selectElement, conditionId) {
            const identifierType = selectElement.value;
            const conditionDiv = selectElement.closest('.condition-item');
            const valueInput = conditionDiv.querySelector('.condition-job-value-input');
            const modalBtn = conditionDiv.querySelector('.condition-modal-btn');
            const selectedJob = conditionDiv.querySelector('.condition-selected-job');

            // Hide all elements first
            valueInput.style.display = 'none';
            if (modalBtn) modalBtn.style.display = 'none';
            if (selectedJob) selectedJob.style.display = 'none';

            switch(identifierType) {
                case 'template_id':
                case 'job_id':
                    valueInput.style.display = 'block';
                    valueInput.placeholder = identifierType === 'template_id' ? 'Enter template ID' : 'Enter job ID';
                    break;
                    
                case 'modal_selection':
                    if (modalBtn) modalBtn.style.display = 'block';
                    if (selectedJob) selectedJob.style.display = 'block';
                    break;
            }

            updateJsonPreview();
        }

        function loadTemplateSteps(productId, conditionId) {
            const conditionDiv = document.getElementById(`condition-${conditionId}`);
            const stepSelect = conditionDiv.querySelector('.condition-step-select');
            
            // Simulate loading template steps from product template
            const templateSteps = {
                '1': [ // Quality Assurance Package
                    {value: 'step_1_100', text: 'Initial Assessment (Tier 100)'},
                    {value: 'step_2_200', text: 'Quality Review (Tier 200)'},
                    {value: 'step_3_300', text: 'Final Validation (Tier 300)'}
                ],
                '2': [ // Customer Satisfaction Survey
                    {value: 'step_1_150', text: 'Survey Preparation (Tier 150)'},
                    {value: 'step_2_250', text: 'Survey Delivery (Tier 250)'},
                    {value: 'step_3_350', text: 'Results Analysis (Tier 350)'}
                ],
                '3': [ // Maintenance Follow-up
                    {value: 'step_1_120', text: 'Maintenance Check (Tier 120)'},
                    {value: 'step_2_220', text: 'Issue Resolution (Tier 220)'},
                    {value: 'step_3_320', text: 'Follow-up Verification (Tier 320)'}
                ],
                '4': [ // Upsell Assessment
                    {value: 'step_1_180', text: 'Opportunity Identification (Tier 180)'},
                    {value: 'step_2_280', text: 'Proposal Development (Tier 280)'},
                    {value: 'step_3_380', text: 'Client Presentation (Tier 380)'}
                ],
                '5': [ // Training & Support
                    {value: 'step_1_140', text: 'Training Setup (Tier 140)'},
                    {value: 'step_2_240', text: 'Training Delivery (Tier 240)'},
                    {value: 'step_3_340', text: 'Support Follow-up (Tier 340)'}
                ]
            };

            stepSelect.innerHTML = '<option value="">Select Step...</option>';
            if (templateSteps[productId]) {
                templateSteps[productId].forEach(step => {
                    stepSelect.innerHTML += `<option value="${step.value}">${step.text}</option>`;
                });
            }

            updateJsonPreview();
        }

        function loadCustomerJobSteps(customerProductId, conditionId) {
            const conditionDiv = document.getElementById(`condition-${conditionId}`);
            const jobStepSelect = conditionDiv.querySelector('.condition-job-step-select');
            
            // Simulate loading job steps from customer's active jobs
            const customerJobSteps = {
                'customer_1': [ // John Smith - Quality Package
                    {value: 'job_1001_100', text: 'John Smith - Initial Assessment (Tier 100)'},
                    {value: 'job_1002_200', text: 'John Smith - Quality Review (Tier 200)'},
                    {value: 'job_1003_300', text: 'John Smith - Final Validation (Tier 300)'}
                ],
                'customer_2': [ // Sarah Johnson - Maintenance Plan
                    {value: 'job_2001_120', text: 'Sarah Johnson - Maintenance Check (Tier 120)'},
                    {value: 'job_2002_220', text: 'Sarah Johnson - Issue Resolution (Tier 220)'},
                    {value: 'job_2003_320', text: 'Sarah Johnson - Follow-up Verification (Tier 320)'}
                ],
                'customer_3': [ // Tech Corp - Support Package
                    {value: 'job_3001_140', text: 'Tech Corp - Training Setup (Tier 140)'},
                    {value: 'job_3002_240', text: 'Tech Corp - Training Delivery (Tier 240)'},
                    {value: 'job_3003_340', text: 'Tech Corp - Support Follow-up (Tier 340)'}
                ]
            };

            jobStepSelect.innerHTML = '<option value="">Select Job Step...</option>';
            if (customerJobSteps[customerProductId]) {
                customerJobSteps[customerProductId].forEach(step => {
                    jobStepSelect.innerHTML += `<option value="${step.value}">${step.text}</option>`;
                });
            }

            updateJsonPreview();
        }

        function updateActionTarget(selectElement, actionId) {
            const target = selectElement.value;
            const actionDiv = selectElement.closest('.action-item');
            const jobDetails = actionDiv.querySelector('.action-job-details');
            const jobIdentifier = actionDiv.querySelector('.action-job-identifier');
            const modalBtn = actionDiv.querySelector('.action-modal-btn');
            const selectedJob = actionDiv.querySelector('.action-selected-job');
            
            if (target === 'current_job') {
                // Hide all job selection controls for current job
                if (jobDetails) jobDetails.style.display = 'none';
                
                // Remove any notes
                const noteDiv = actionDiv.querySelector('.next-job-note');
                if (noteDiv) noteDiv.remove();
            } else if (target === 'next_job') {
                // For "Next Job in Flow", don't show job ID picker - it's automatic
                if (jobDetails) jobDetails.style.display = 'none';
                if (jobIdentifier) jobIdentifier.style.display = 'none';
                if (modalBtn) modalBtn.style.display = 'none';
                if (selectedJob) selectedJob.style.display = 'none';
                
                // Add a helpful note
                const noteDiv = actionDiv.querySelector('.next-job-note');
                if (!noteDiv) {
                    const noteHtml = '<div class="next-job-note mt-2"><small class="text-muted"><i class="fas fa-info-circle"></i> Next job will be automatically determined by workflow sequence</small></div>';
                    actionDiv.insertAdjacentHTML('beforeend', noteHtml);
                }
            } else if (target === 'specific_job') {
                // For specific job, show the job identifier input
                if (jobDetails) jobDetails.style.display = 'block';
                if (jobIdentifier) jobIdentifier.style.display = 'block';
                if (modalBtn) modalBtn.style.display = 'none';
                if (selectedJob) selectedJob.style.display = 'none';
                
                // Remove next job note if it exists
                const noteDiv = actionDiv.querySelector('.next-job-note');
                if (noteDiv) noteDiv.remove();
            } else {
                // For other targets (related_job, etc.), show advanced selection
                if (jobDetails) jobDetails.style.display = 'block';
                if (jobIdentifier) jobIdentifier.style.display = 'none';
                if (modalBtn) modalBtn.style.display = 'block';
                if (selectedJob) selectedJob.style.display = 'block';
                
                // Remove next job note if it exists
                const noteDiv = actionDiv.querySelector('.next-job-note');
                if (noteDiv) noteDiv.remove();
            }
            
            updateJsonPreview();
        }

        function loadProductTemplate(selectElement, actionId) {
            const templateId = selectElement.value;
            const actionDiv = selectElement.closest('.action-item');
            const workflowName = actionDiv.querySelector('.action-workflow-name');
            
            // Simulate loading product template data (in real app, this would be an API call)
            const templates = {
                '1': {
                    name: 'Quality Assurance Package',
                    description: 'Comprehensive quality check and follow-up workflow'
                },
                '2': {
                    name: 'Customer Satisfaction Survey',
                    description: 'Post-service customer satisfaction assessment'
                },
                '3': {
                    name: 'Maintenance Follow-up',
                    description: 'Scheduled maintenance and support workflow'
                },
                '4': {
                    name: 'Upsell Assessment',
                    description: 'Opportunity assessment for additional services'
                },
                '5': {
                    name: 'Training & Support',
                    description: 'Customer training and ongoing support workflow'
                }
            };
            
            if (templateId && templates[templateId]) {
                workflowName.value = templates[templateId].name;
            }
            
            updateJsonPreview();
        }

        function addValidation() {
            validationCounter++;
            const validationsContainer = document.getElementById('validations-container');
            const validationHtml = `
                <div class="validation-item border rounded p-3 mb-2" id="validation-${validationCounter}" data-type="businessRule">
                    <div class="row">
                        <div class="col-md-2">
                            <label class="form-label">Validation Type</label>
                            <select class="form-select validation-type" onchange="updateValidationType(this, ${validationCounter})">
                                <option value="businessRule">Business Rule</option>
                                <option value="dataIntegrity">Data Integrity</option>
                                <option value="security">Security Check</option>
                                <option value="workflow">Workflow State</option>
                                <option value="custom">Custom Check</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Check</label>
                            <select class="form-select validation-check">
                                <option value="field_not_empty">Field Not Empty</option>
                                <option value="field_matches">Field Matches Value</option>
                                <option value="customer_active">Customer Active</option>
                                <option value="has_permission">User Has Permission</option>
                                <option value="workflow_allows">Workflow Allows</option>
                                <option value="data_consistent">Data Consistent</option>
                                <option value="custom_function">Custom Function</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Target Field/Context</label>
                            <input type="text" class="form-control validation-target" placeholder="e.g., customer_id">
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Expected Value</label>
                            <input type="text" class="form-control validation-value" placeholder="e.g., active">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Error Message</label>
                            <input type="text" class="form-control validation-error" placeholder="What to show if validation fails">
                        </div>
                        <div class="col-md-1 d-flex align-items-end">
                            <button class="btn btn-outline-danger btn-sm" onclick="removeValidation(${validationCounter})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-6">
                            <label class="form-label">Description</label>
                            <input type="text" class="form-control validation-description" placeholder="What this validation ensures">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Severity</label>
                            <select class="form-select validation-severity">
                                <option value="error">Error (Block Update)</option>
                                <option value="warning">Warning (Log Only)</option>
                                <option value="critical">Critical (Stop All)</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Skip on</label>
                            <select class="form-select validation-skip">
                                <option value="">Never Skip</option>
                                <option value="admin">Admin Override</option>
                                <option value="system">System Updates</option>
                                <option value="emergency">Emergency Mode</option>
                            </select>
                        </div>
                    </div>
                </div>
            `;
            validationsContainer.insertAdjacentHTML('beforeend', validationHtml);
            updateJsonPreview();
        }

        function updateValidationType(selectElement, validationId) {
            const validationType = selectElement.value;
            const validationDiv = selectElement.closest('.validation-item');
            const checkSelect = validationDiv.querySelector('.validation-check');
            
            // Update validation item styling
            validationDiv.setAttribute('data-type', validationType);
            
            // Update available checks based on type
            const checkOptions = {
                'businessRule': [
                    {value: 'field_not_empty', text: 'Field Not Empty'},
                    {value: 'field_matches', text: 'Field Matches Value'},
                    {value: 'tier_valid', text: 'Valid Tier Level'},
                    {value: 'status_transition', text: 'Valid Status Transition'}
                ],
                'dataIntegrity': [
                    {value: 'referential_integrity', text: 'Reference Exists'},
                    {value: 'data_consistent', text: 'Data Consistent'},
                    {value: 'no_duplicates', text: 'No Duplicates'},
                    {value: 'format_valid', text: 'Format Valid'}
                ],
                'security': [
                    {value: 'has_permission', text: 'User Has Permission'},
                    {value: 'access_allowed', text: 'Access Allowed'},
                    {value: 'not_locked', text: 'Record Not Locked'},
                    {value: 'auth_valid', text: 'Authentication Valid'}
                ],
                'workflow': [
                    {value: 'workflow_allows', text: 'Workflow Allows Change'},
                    {value: 'prerequisites_met', text: 'Prerequisites Met'},
                    {value: 'no_blocking_jobs', text: 'No Blocking Jobs'},
                    {value: 'sequence_valid', text: 'Valid Sequence'}
                ],
                'custom': [
                    {value: 'custom_function', text: 'Custom Function'},
                    {value: 'external_api', text: 'External API Check'},
                    {value: 'calculated_rule', text: 'Calculated Rule'}
                ]
            };
            
            checkSelect.innerHTML = '';
            checkOptions[validationType].forEach(option => {
                checkSelect.innerHTML += `<option value="${option.value}">${option.text}</option>`;
            });
            
            updateJsonPreview();
        }

        function removeValidation(validationId) {
            document.getElementById(`validation-${validationId}`).remove();
            updateJsonPreview();
        }

        // Alias for updateJsonPreview - used by other functions
        function updateJsonPreview() {
            generateRuleFromBuilder();
        }

        function addCondition() {
            conditionCounter++;
            const conditionsContainer = document.getElementById('conditions-container');
            const conditionHtml = `
                <div class="condition-item border rounded p-3 mb-2" id="condition-${conditionCounter}">
                    <div class="row">
                        <div class="col-md-2">
                            <label class="form-label">Job Context</label>
                            <select class="form-select condition-job-context" onchange="updateConditionFields(this, ${conditionCounter})">
                                <option value="current">Current Job</option>
                                <option value="preceding">Preceding Job</option>
                                <option value="next">Next Job in Flow</option>
                                <option value="related">Related Job</option>
                                <option value="specific">Specific Job</option>
                            </select>
                        </div>
                        <div class="col-md-2 condition-job-selector" style="display: none;">
                            <label class="form-label">Job Identifier</label>
                            <select class="form-select condition-job-id" onchange="updateJobIdentifierType(this, ${conditionCounter})">
                                <option value="template_id">Template ID</option>
                                <option value="job_id">Specific Job ID</option>
                                <option value="modal_selection">Advanced Selection</option>
                            </select>
                        </div>
                        <div class="col-md-2 condition-job-value" style="display: none;">
                            <label class="form-label">Job Value</label>
                            <input type="text" class="form-control condition-job-value-input" placeholder="Enter ID">
                            <button class="btn btn-outline-primary condition-modal-btn" style="display: none;" onclick="openJobSelectionModal('condition', ${conditionCounter})">
                                <i class="fas fa-search"></i> Select Job
                            </button>
                            <input type="text" class="form-control condition-selected-job" style="display: none;" readonly placeholder="No job selected">
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Field</label>
                            <select class="form-select condition-field">
                                <option value="current_status">Status</option>
                                <option value="tier">Tier</option>
                                <option value="user_id">Assigned User</option>
                                <option value="target_date">Target Date</option>
                                <option value="customer_id">Customer ID</option>
                                <option value="completed_date">Completion Date</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Operator</label>
                            <select class="form-select condition-operator">
                                <option value="equals">Equals</option>
                                <option value="not_equals">Not Equals</option>
                                <option value="greater_than">Greater Than</option>
                                <option value="less_than">Less Than</option>
                                <option value="contains">Contains</option>
                                <option value="is_null">Is Empty</option>
                                <option value="is_not_null">Is Not Empty</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Value</label>
                            <input type="text" class="form-control condition-value" placeholder="e.g., complete">
                            <select class="form-select condition-value-select" style="display: none;">
                                <option value="pending">Pending</option>
                                <option value="active">Active</option>
                                <option value="complete">Complete</option>
                                <option value="cancelled">Cancelled</option>
                                <option value="on_hold">On Hold</option>
                            </select>
                        </div>
                        <div class="col-md-2 d-flex align-items-end">
                            <button class="btn btn-outline-danger btn-sm" onclick="removeCondition(${conditionCounter})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    <div class="row mt-2 condition-job-details" style="display: none;">
                        <div class="col-md-4">
                            <label class="form-label">Additional Context</label>
                            <input type="text" class="form-control condition-job-context-value" placeholder="Enter template ID, job ID, etc.">
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Relationship Description</label>
                            <input type="text" class="form-control condition-relationship" placeholder="e.g., Quality check for this job">
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Reference Tier</label>
                            <input type="number" class="form-control condition-reference-tier" placeholder="e.g., 500">
                        </div>
                    </div>
                </div>
            `;
            conditionsContainer.insertAdjacentHTML('beforeend', conditionHtml);
        }

        function removeCondition(id) {
            document.getElementById(`condition-${id}`).remove();
        }

        function addAction(type) {
            actionCounter++;
            const actionsList = document.getElementById('actions-list');
            let actionHtml = '';

            switch(type) {
                case 'updateStatus':
                    actionHtml = `
                        <div class="action-item border rounded p-3 mb-3" id="action-${actionCounter}" data-type="updateStatus">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="mb-0"><i class="fas fa-edit text-success"></i> Update Status Action</h6>
                                <button class="btn btn-outline-danger btn-sm" onclick="removeAction(${actionCounter})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <label class="form-label">Target Job</label>
                                    <select class="form-select action-target" onchange="updateActionTarget(this, ${actionCounter})">
                                        <option value="current_job">Current Job</option>
                                        <option value="related_job">Related Job</option>
                                        <option value="preceding_job">Preceding Job</option>
                                        <option value="next_job">Next Job in Flow</option>
                                        <option value="specific_job">Specific Job</option>
                                    </select>
                                </div>
                                <div class="col-md-3 action-job-details" style="display: none;">
                                    <label class="form-label">Job Identifier</label>
                                    <input type="text" class="form-control action-job-identifier" placeholder="Template ID or Job ID">
                                    <button class="btn btn-outline-primary action-modal-btn" style="display: none;" onclick="openJobSelectionModal('action', ${actionCounter})">
                                        <i class="fas fa-search"></i> Select Job
                                    </button>
                                    <input type="text" class="form-control action-selected-job" style="display: none;" readonly placeholder="No job selected">
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">New Status</label>
                                    <select class="form-select action-value">
                                        <option value="pending">Pending</option>
                                        <option value="active">Active</option>
                                        <option value="complete">Complete</option>
                                        <option value="cancelled">Cancelled</option>
                                        <option value="on_hold">On Hold</option>
                                        <option value="quality_check">Quality Check</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Description</label>
                                    <input type="text" class="form-control action-description" placeholder="e.g., Activate next job in workflow">
                                </div>
                            </div>
                        </div>
                    `;
                    break;

                case 'updateRelatedStatus':
                    actionHtml = `
                        <div class="action-item border rounded p-3 mb-3" id="action-${actionCounter}" data-type="updateRelatedStatus">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="mb-0"><i class="fas fa-link text-success"></i> Update Related Status Action</h6>
                                <button class="btn btn-outline-danger btn-sm" onclick="removeAction(${actionCounter})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <label class="form-label">Target Job</label>
                                    <select class="form-select action-target" onchange="updateActionTarget(this, ${actionCounter})">
                                        <option value="current_job">Current Job</option>
                                        <option value="related_job">Related Job</option>
                                        <option value="preceding_job">Preceding Job</option>
                                        <option value="next_job">Next Job in Flow</option>
                                        <option value="specific_job">Specific Job</option>
                                    </select>
                                </div>
                                <div class="col-md-3 action-job-details" style="display: none;">
                                    <label class="form-label">Job Identifier</label>
                                    <input type="text" class="form-control action-job-identifier" placeholder="Template ID or Job ID">
                                    <button class="btn btn-outline-primary action-modal-btn" style="display: none;" onclick="openJobSelectionModal('action', ${actionCounter})">
                                        <i class="fas fa-search"></i> Select Job
                                    </button>
                                    <input type="text" class="form-control action-selected-job" style="display: none;" readonly placeholder="No job selected">
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">New Status</label>
                                    <select class="form-select action-value">
                                        <option value="pending">Pending</option>
                                        <option value="active">Active</option>
                                        <option value="complete">Complete</option>
                                        <option value="cancelled">Cancelled</option>
                                        <option value="on_hold">On Hold</option>
                                        <option value="quality_check">Quality Check</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Description</label>
                                    <input type="text" class="form-control action-description" placeholder="e.g., Activate next job in workflow">
                                </div>
                            </div>
                        </div>
                    `;
                    break;

                case 'addLog':
                    actionHtml = `
                        <div class="action-item border rounded p-3 mb-3" id="action-${actionCounter}" data-type="addLog">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="mb-0"><i class="fas fa-file-alt text-info"></i> Add Log Entry Action</h6>
                                <button class="btn btn-outline-danger btn-sm" onclick="removeAction(${actionCounter})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <label class="form-label">Log Message</label>
                                    <textarea class="form-control action-message" rows="2" placeholder="Job {{job.display_text}} completed successfully. Next job activated."></textarea>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Log Level</label>
                                    <select class="form-select action-level">
                                        <option value="info">Info</option>
                                        <option value="success">Success</option>
                                        <option value="warning">Warning</option>
                                        <option value="error">Error</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Include Metadata</label>
                                    <div class="form-check">
                                        <input class="form-check-input action-metadata" type="checkbox" checked>
                                        <label class="form-check-label">
                                            Timestamp, User, etc.
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    break;

                case 'createWorkflow':
                    actionHtml = `
                        <div class="action-item border rounded p-3 mb-3" id="action-${actionCounter}" data-type="createWorkflow">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="mb-0"><i class="fas fa-project-diagram text-warning"></i> Create Workflow Action</h6>
                                <button class="btn btn-outline-danger btn-sm" onclick="removeAction(${actionCounter})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <label class="form-label">Workflow Name</label>
                                    <input type="text" class="form-control action-workflow-name" placeholder="Post-Completion Follow-up">
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Target Customer</label>
                                    <select class="form-select action-customer-target">
                                        <option value="current">Current Job Customer</option>
                                        <option value="specific">Specific Customer</option>
                                        <option value="all">All Customers</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Template (from Products)</label>
                                    <select class="form-select action-template" onchange="loadProductTemplate(this, ${actionCounter})">
                                        <option value="">Select Product Template...</option>
                                        <!-- These will be populated from products table -->
                                        <option value="1">Quality Assurance Package</option>
                                        <option value="2">Customer Satisfaction Survey</option>
                                        <option value="3">Maintenance Follow-up</option>
                                        <option value="4">Upsell Assessment</option>
                                        <option value="5">Training & Support</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Tier</label>
                                    <input type="number" class="form-control action-tier" value="500" placeholder="500">
                                </div>
                            </div>
                            <div class="row mt-3">
                                <div class="col-md-6">
                                    <label class="form-label">Priority</label>
                                    <select class="form-select action-priority">
                                        <option value="normal">Normal</option>
                                        <option value="low">Low</option>
                                        <option value="high">High</option>
                                        <option value="urgent">Urgent</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Start Date Offset (days)</label>
                                    <input type="number" class="form-control action-offset" value="0" placeholder="0">
                                </div>
                            </div>
                            <div class="mt-3">
                                <label class="form-label">Workflow Jobs <button class="btn btn-outline-primary btn-sm ms-2" onclick="addWorkflowJob(${actionCounter})">Add Job</button></label>
                                <div class="workflow-jobs" id="workflow-jobs-${actionCounter}">
                                    <!-- Workflow jobs will be added here -->
                                </div>
                            </div>
                        </div>
                    `;
                    break;

                case 'notify':
                    actionHtml = `
                        <div class="action-item border rounded p-3 mb-3" id="action-${actionCounter}" data-type="notify">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="mb-0"><i class="fas fa-bell text-primary"></i> Send Notification Action</h6>
                                <button class="btn btn-outline-danger btn-sm" onclick="removeAction(${actionCounter})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <label class="form-label">Type</label>
                                    <select class="form-select action-notify-type">
                                        <option value="email">Email</option>
                                        <option value="system">System Notification</option>
                                        <option value="sms">SMS</option>
                                        <option value="slack">Slack</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">To</label>
                                    <select class="form-select action-notify-to">
                                        <option value="job_owner">Job Owner</option>
                                        <option value="customer">Customer</option>
                                        <option value="admin">Admin</option>
                                        <option value="team_lead">Team Lead</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Message</label>
                                    <input type="text" class="form-control action-notify-message" placeholder="Job {{job.display_text}} completed successfully">
                                </div>
                            </div>
                        </div>
                    `;
                    break;

                case 'updateDate':
                    actionHtml = `
                        <div class="action-item border rounded p-3 mb-3" id="action-${actionCounter}" data-type="updateDate">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="mb-0"><i class="fas fa-calendar text-secondary"></i> Update Date Action</h6>
                                <button class="btn btn-outline-danger btn-sm" onclick="removeAction(${actionCounter})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <label class="form-label">Target Records</label>
                                    <select class="form-select action-date-target" onchange="updateActionTarget(this, ${actionCounter})">
                                        <option value="current_job">Current Job</option>
                                        <option value="next_job">Next Job in Flow</option>
                                        <option value="related_job">Related Job</option>
                                        <option value="preceding_job">Preceding Job</option>
                                        <option value="specific_job">Specific Job</option>
                                        <option value="related_tasks">Related Tasks</option>
                                    </select>
                                </div>
                                <div class="col-md-3 action-job-details" style="display: none;">
                                    <label class="form-label">Job Identifier</label>
                                    <input type="text" class="form-control action-job-identifier" placeholder="Template ID or Job ID">
                                    <button class="btn btn-outline-primary action-modal-btn" style="display: none;" onclick="openJobSelectionModal('action', ${actionCounter})">
                                        <i class="fas fa-search"></i> Select Job
                                    </button>
                                    <input type="text" class="form-control action-selected-job" style="display: none;" readonly placeholder="No job selected">
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Target Field</label>
                                    <select class="form-select action-date-field">
                                        <option value="target_date">Target Date</option>
                                        <option value="completed_date">Completed Date</option>
                                        <option value="follow_up_date">Follow-up Date</option>
                                        <option value="reminder_date">Reminder Date</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Date Value</label>
                                    <select class="form-select action-date-value">
                                        <option value="now">Current Date</option>
                                        <option value="today_plus_1">Today + 1 Day</option>
                                        <option value="today_plus_3">Today + 3 Days</option>
                                        <option value="today_plus_7">Today + 1 Week</option>
                                        <option value="business_days_3">+3 Business Days</option>
                                        <option value="custom">Custom Date</option>
                                    </select>
                                </div>
                            </div>
                                </div>
                            </div>
                        </div>
                    `;
                    break;
            }

            actionsList.insertAdjacentHTML('beforeend', actionHtml);
            generateRuleFromBuilder(); // Auto-update preview
        }

        function removeAction(id) {
            document.getElementById(`action-${id}`).remove();
            generateRuleFromBuilder(); // Auto-update preview
        }

        function addWorkflowJob(actionId) {
            const jobsContainer = document.getElementById(`workflow-jobs-${actionId}`);
            const jobId = Date.now();
            const jobHtml = `
                <div class="workflow-job border rounded p-2 mb-2" id="workflow-job-${jobId}">
                    <div class="row">
                        <div class="col-md-3">
                            <label class="form-label">Job Title</label>
                            <input type="text" class="form-control job-title" placeholder="Quality Check">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Tier</label>
                            <input type="number" class="form-control job-tier" placeholder="100">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Target Date</label>
                            <select class="form-select job-target-date">
                                <option value="today_plus_1">Today + 1 Day</option>
                                <option value="today_plus_3">Today + 3 Days</option>
                                <option value="today_plus_7">Today + 1 Week</option>
                                <option value="business_days_2">+2 Business Days</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Status</label>
                            <select class="form-select job-status">
                                <option value="pending">Pending</option>
                                <option value="inactive">Inactive</option>
                            </select>
                        </div>
                        <div class="col-md-1 d-flex align-items-end">
                            <button class="btn btn-outline-danger btn-sm" onclick="document.getElementById('workflow-job-${jobId}').remove(); generateRuleFromBuilder();">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-12">
                            <label class="form-label">Description</label>
                            <input type="text" class="form-control job-description" placeholder="Verify completion quality and customer satisfaction">
                        </div>
                    </div>
                </div>
            `;
            jobsContainer.insertAdjacentHTML('beforeend', jobHtml);
        }

        function loadWorkflowTemplate(selectElement, actionId) {
            const template = selectElement.value;
            const jobsContainer = document.getElementById(`workflow-jobs-${actionId}`);
            
            // Clear existing jobs
            jobsContainer.innerHTML = '';

            const templates = {
                'quality_check': [
                    { title: 'Quality Assurance Review', tier: 150, description: 'Detailed QA review for completed work', targetDate: 'today_plus_1', status: 'pending' },
                    { title: 'Customer Quality Survey', tier: 200, description: 'Send quality survey to customer', targetDate: 'today_plus_3', status: 'inactive' }
                ],
                'customer_satisfaction': [
                    { title: 'Satisfaction Survey', tier: 100, description: 'Send satisfaction survey for completed work', targetDate: 'today_plus_1', status: 'pending' },
                    { title: 'Follow-up Call', tier: 200, description: 'Follow-up call to discuss feedback', targetDate: 'today_plus_7', status: 'inactive' }
                ],
                'upsell_opportunity': [
                    { title: 'Opportunity Assessment', tier: 300, description: 'Evaluate potential additional services', targetDate: 'today_plus_7', status: 'pending' },
                    { title: 'Proposal Creation', tier: 400, description: 'Create upsell proposal if opportunity identified', targetDate: 'today_plus_14', status: 'inactive' }
                ]
            };

            if (templates[template]) {
                templates[template].forEach(job => {
                    addWorkflowJob(actionId);
                    const lastJob = jobsContainer.lastElementChild;
                    lastJob.querySelector('.job-title').value = job.title;
                    lastJob.querySelector('.job-tier').value = job.tier;
                    lastJob.querySelector('.job-description').value = job.description;
                    lastJob.querySelector('.job-target-date').value = job.targetDate;
                    lastJob.querySelector('.job-status').value = job.status;
                });
            }
            generateRuleFromBuilder();
        }

        function generateRuleFromBuilder() {
            const ruleName = document.getElementById('rule-name').value || 'Untitled Rule';
            const ruleTrigger = document.getElementById('rule-trigger').value;
            const ruleDescription = document.getElementById('rule-description').value || 'Generated rule';

            if (!ruleTrigger) {
                document.getElementById('generated-rule-preview').textContent = 'Please select a trigger event to generate rule';
                return;
            }

            const rule = {
                on: ruleTrigger,
                name: ruleName,
                description: ruleDescription,
                conditions: [],
                validations: [],
                actions: []
            };

            // Collect conditions
            const conditions = document.querySelectorAll('.condition-item');
            conditions.forEach(condition => {
                const jobContext = condition.querySelector('.condition-job-context').value;
                const field = condition.querySelector('.condition-field').value;
                const operator = condition.querySelector('.condition-operator').value;
                const value = condition.querySelector('.condition-value, .condition-value-select').value;

                if (field && operator && value) {
                    const conditionObj = {
                        field: field,
                        operator: operator,
                        value: isNaN(value) ? value : Number(value)
                    };

                    // Add job context if not current job
                    if (jobContext !== 'current') {
                        conditionObj.jobContext = jobContext;
                        
                        // Add job identifier if specified
                        const jobIdType = condition.querySelector('.condition-job-id');
                        if (jobIdType) {
                            const identifierType = jobIdType.value;
                            conditionObj.jobIdentifier = { type: identifierType };

                            switch(identifierType) {
                                case 'template_id':
                                case 'job_id':
                                    const valueInput = condition.querySelector('.condition-job-value-input');
                                    if (valueInput && valueInput.value) {
                                        conditionObj.jobIdentifier.value = valueInput.value;
                                    }
                                    break;
                                    
                                case 'modal_selection':
                                    const selectedJobDiv = condition.querySelector('.condition-selected-job');
                                    if (selectedJobDiv && selectedJobDiv.dataset.jobId) {
                                        conditionObj.jobIdentifier.value = selectedJobDiv.dataset.jobId;
                                        conditionObj.jobIdentifier.selectedJob = {
                                            jobId: selectedJobDiv.dataset.jobId,
                                            displayText: selectedJobDiv.value,
                                            jobType: selectedJobDiv.dataset.jobType || 'unknown'
                                        };
                                        if (selectedJobDiv.dataset.templateId) {
                                            conditionObj.jobIdentifier.templateId = selectedJobDiv.dataset.templateId;
                                        }
                                        if (selectedJobDiv.dataset.stepId) {
                                            conditionObj.jobIdentifier.stepId = selectedJobDiv.dataset.stepId;
                                        }
                                    }
                                    break;
                            }
                        }
                        
                        // Add relationship description if provided
                        const relationship = condition.querySelector('.condition-relationship');
                        if (relationship && relationship.value) {
                            conditionObj.relationship = relationship.value;
                        }

                        // Add reference tier if provided
                        const referenceTier = condition.querySelector('.condition-reference-tier');
                        if (referenceTier && referenceTier.value) {
                            conditionObj.referenceTier = Number(referenceTier.value);
                        }

                        // Add additional context if provided
                        const contextValue = condition.querySelector('.condition-job-context-value');
                        if (contextValue && contextValue.value) {
                            conditionObj.additionalContext = contextValue.value;
                        }
                    }

                    rule.conditions.push(conditionObj);
                }
            });

            // Collect validations
            const validations = document.querySelectorAll('.validation-item');
            validations.forEach(validation => {
                const validationType = validation.querySelector('.validation-type').value;
                const check = validation.querySelector('.validation-check').value;
                const target = validation.querySelector('.validation-target').value;
                const value = validation.querySelector('.validation-value').value;
                const errorMessage = validation.querySelector('.validation-error').value;
                const description = validation.querySelector('.validation-description').value;
                const severity = validation.querySelector('.validation-severity').value;
                const skipOn = validation.querySelector('.validation-skip').value;

                if (check && target) {
                    const validationObj = {
                        type: validationType,
                        check: check,
                        target: target,
                        expectedValue: value,
                        errorMessage: errorMessage || `Validation failed: ${check} on ${target}`,
                        description: description || `${validationType} validation`,
                        severity: severity,
                        blockUpdate: severity === 'error' || severity === 'critical'
                    };

                    if (skipOn) {
                        validationObj.skipOn = skipOn;
                    }

                    rule.validations.push(validationObj);
                }
            });

            // Collect actions
            const actions = document.querySelectorAll('.action-item');
            actions.forEach(actionElement => {
                const actionType = actionElement.dataset.type;
                let action = { type: actionType };

                switch(actionType) {
                    case 'updateStatus':
                        action = {
                            type: 'updateStatus',
                            description: actionElement.querySelector('.action-description').value || 'Update status',
                            target: actionElement.querySelector('.action-target').value,
                            value: actionElement.querySelector('.action-value').value
                        };

                        // Add job identifier if targeting related job
                        const statusTarget = actionElement.querySelector('.action-target').value;
                        if (statusTarget !== 'current_job') {
                            const jobIdentifierInput = actionElement.querySelector('.action-job-identifier');
                            const selectedJobInput = actionElement.querySelector('.action-selected-job');
                            
                            if (selectedJobInput && selectedJobInput.dataset.jobId) {
                                // Modal selection was used
                                action.jobIdentifier = {
                                    type: 'modal_selection',
                                    value: selectedJobInput.dataset.jobId,
                                    selectedJob: {
                                        jobId: selectedJobInput.dataset.jobId,
                                        displayText: selectedJobInput.value,
                                        jobType: selectedJobInput.dataset.jobType || 'unknown'
                                    }
                                };
                                if (selectedJobInput.dataset.templateId) {
                                    action.jobIdentifier.templateId = selectedJobInput.dataset.templateId;
                                }
                                if (selectedJobInput.dataset.stepId) {
                                    action.jobIdentifier.stepId = selectedJobInput.dataset.stepId;
                                }
                            } else if (jobIdentifierInput && jobIdentifierInput.value) {
                                // Simple text input was used
                                action.jobIdentifier = {
                                    type: 'simple',
                                    value: jobIdentifierInput.value
                                };
                            }
                        }
                        break;

                    case 'updateRelatedStatus':
                        action = {
                            type: 'updateRelatedStatus',
                            description: actionElement.querySelector('.action-description').value || 'Update related status',
                            target: actionElement.querySelector('.action-target').value,
                            value: actionElement.querySelector('.action-value').value
                        };

                        // Add job identifier if targeting related job
                        const relatedTarget = actionElement.querySelector('.action-target').value;
                        if (relatedTarget !== 'current_job') {
                            const jobIdentifierInput = actionElement.querySelector('.action-job-identifier');
                            const selectedJobInput = actionElement.querySelector('.action-selected-job');
                            
                            if (selectedJobInput && selectedJobInput.dataset.jobId) {
                                // Modal selection was used
                                action.jobIdentifier = {
                                    type: 'modal_selection',
                                    value: selectedJobInput.dataset.jobId,
                                    selectedJob: {
                                        jobId: selectedJobInput.dataset.jobId,
                                        displayText: selectedJobInput.value,
                                        jobType: selectedJobInput.dataset.jobType || 'unknown'
                                    }
                                };
                                if (selectedJobInput.dataset.templateId) {
                                    action.jobIdentifier.templateId = selectedJobInput.dataset.templateId;
                                }
                                if (selectedJobInput.dataset.stepId) {
                                    action.jobIdentifier.stepId = selectedJobInput.dataset.stepId;
                                }
                            } else if (jobIdentifierInput && jobIdentifierInput.value) {
                                // Simple text input was used
                                action.jobIdentifier = {
                                    type: 'simple',
                                    value: jobIdentifierInput.value
                                };
                            }
                        }
                        break;

                    case 'addLog':
                        action = {
                            type: 'addLogEntry',
                            description: 'Add log entry',
                            message: actionElement.querySelector('.action-message').value,
                            level: actionElement.querySelector('.action-level').value,
                            includeMetadata: actionElement.querySelector('.action-metadata').checked
                        };
                        break;

                    case 'createWorkflow':
                        action = {
                            type: 'createWorkflow',
                            description: 'Create new workflow from product template',
                            target: {
                                customer_id: '{{job.customer_id}}'
                            },
                            template: {
                                product_id: actionElement.querySelector('.action-template').value || null,
                                name: actionElement.querySelector('.action-workflow-name').value || 'Generated Workflow',
                                tier: Number(actionElement.querySelector('.action-tier').value) || 500,
                                priority: actionElement.querySelector('.action-priority').value || 'normal',
                                start_offset_days: Number(actionElement.querySelector('.action-offset').value) || 0
                            }
                        };
                        break;

                    case 'notify':
                        action = {
                            type: 'notify',
                            description: 'Send notification',
                            notificationType: actionElement.querySelector('.action-notify-type').value,
                            to: actionElement.querySelector('.action-notify-to').value,
                            message: actionElement.querySelector('.action-notify-message').value
                        };
                        break;

                    case 'updateDate':
                        action = {
                            type: 'updateDate',
                            description: 'Update date field',
                            field: actionElement.querySelector('.action-date-field').value,
                            value: actionElement.querySelector('.action-date-value').value,
                            target: actionElement.querySelector('.action-date-target').value
                        };

                        // Add job identifier if targeting related job
                        const dateTarget = actionElement.querySelector('.action-date-target').value;
                        if (dateTarget !== 'current_job') {
                            const jobIdentifierInput = actionElement.querySelector('.action-job-identifier');
                            const selectedJobInput = actionElement.querySelector('.action-selected-job');
                            
                            if (selectedJobInput && selectedJobInput.dataset.jobId) {
                                // Modal selection was used
                                action.jobIdentifier = {
                                    type: 'modal_selection',
                                    value: selectedJobInput.dataset.jobId,
                                    selectedJob: {
                                        jobId: selectedJobInput.dataset.jobId,
                                        displayText: selectedJobInput.value,
                                        jobType: selectedJobInput.dataset.jobType || 'unknown'
                                    }
                                };
                                if (selectedJobInput.dataset.templateId) {
                                    action.jobIdentifier.templateId = selectedJobInput.dataset.templateId;
                                }
                                if (selectedJobInput.dataset.stepId) {
                                    action.jobIdentifier.stepId = selectedJobInput.dataset.stepId;
                                }
                            } else if (jobIdentifierInput && jobIdentifierInput.value) {
                                // Simple text input was used
                                action.jobIdentifier = {
                                    type: 'simple',
                                    value: jobIdentifierInput.value
                                };
                            }
                        }
                        break;
                }

                rule.actions.push(action);
            });

            // Update preview
            document.getElementById('generated-rule-preview').textContent = JSON.stringify(rule, null, 2);
        }

        function loadRuleTemplate(templateName) {
            if (templateName === 'workflow') {
                // Load the job completion workflow template
                document.getElementById('rule-name').value = 'Job Completion Workflow';
                document.getElementById('rule-trigger').value = 'current_status:complete';
                document.getElementById('rule-description').value = 'Activate next job, log completion, and create new workflow';

                // Clear existing conditions and actions
                document.getElementById('conditions-container').innerHTML = '<div class="d-flex align-items-center mb-2"><button class="btn btn-outline-primary btn-sm" onclick="addCondition()"><i class="fas fa-plus"></i> Add Condition</button><small class="text-muted ms-3">e.g., "Only run if tier > 500"</small></div>';
                document.getElementById('actions-list').innerHTML = '';

                // Add condition
                addCondition();
                const lastCondition = document.querySelector('.condition-item:last-child');
                lastCondition.querySelector('.condition-field').value = 'tier';
                lastCondition.querySelector('.condition-operator').value = 'greater_than';
                lastCondition.querySelector('.condition-value').value = '500';

                // Add actions
                addAction('updateStatus');
                let lastAction = document.querySelector('.action-item:last-child');
                lastAction.querySelector('.action-target').value = 'next_job';
                lastAction.querySelector('.action-value').value = 'pending';
                lastAction.querySelector('.action-description').value = 'Activate next job in workflow';

                addAction('addLog');
                lastAction = document.querySelector('.action-item:last-child');
                lastAction.querySelector('.action-message').value = 'Job {{job.display_text}} completed successfully. Next job activated.';
                lastAction.querySelector('.action-level').value = 'success';

                addAction('createWorkflow');
                lastAction = document.querySelector('.action-item:last-child');
                lastAction.querySelector('.action-workflow-name').value = 'Post-Completion Follow-up';
                lastAction.querySelector('.action-template').value = 'quality_check';
                loadWorkflowTemplate(lastAction.querySelector('.action-template'), actionCounter);

                generateRuleFromBuilder();
            }
        }

        function clearRuleBuilder() {
            document.getElementById('rule-name').value = '';
            document.getElementById('rule-trigger').value = '';
            document.getElementById('rule-description').value = '';
            document.getElementById('conditions-container').innerHTML = '<div class="d-flex align-items-center mb-2"><button class="btn btn-outline-primary btn-sm" onclick="addCondition()"><i class="fas fa-plus"></i> Add Condition</button><small class="text-muted ms-3">e.g., "Only run if tier > 500"</small></div>';
            document.getElementById('validations-container').innerHTML = '<div class="d-flex align-items-center mb-2"><button class="btn btn-outline-warning btn-sm" onclick="addValidation()"><i class="fas fa-plus"></i> Add Validation</button><small class="text-muted ms-3">e.g., "Ensure customer has active subscription"</small></div>';
            document.getElementById('actions-list').innerHTML = '';
            document.getElementById('generated-rule-preview').textContent = 'Configure rule above to see generated JSON...';
            conditionCounter = 0;
            actionCounter = 0;
            validationCounter = 0;
        }

        // Add event listeners for auto-updating preview
        document.addEventListener('DOMContentLoaded', function() {
            // Auto-update preview when form fields change
            document.addEventListener('input', function(e) {
                if (e.target.closest('#visual-builder')) {
                    generateRuleFromBuilder();
                }
            });
            
            document.addEventListener('change', function(e) {
                if (e.target.closest('#visual-builder')) {
                    generateRuleFromBuilder();
                }
            });
        });

        // Add more helper functions as needed...
        function createNewField() {
            const fieldID = prompt('Enter new field ID:');
            if (fieldID && !fieldConfigs[fieldID]) {
                fieldConfigs[fieldID] = {
                    table: 'table_name',
                    column: 'column_name',
                    validations: [],
                    encoding: 'none',
                    preActions: [],
                    postActions: []
                };
                
                // Add to selector
                const selector = document.getElementById('fieldSelector');
                const option = document.createElement('option');
                option.value = fieldID;
                option.textContent = fieldID;
                selector.appendChild(option);
                selector.value = fieldID;
                
                loadFieldConfig();
                updateConfigSummary();
                logActivity(`Created new field configuration: ${fieldID}`);
            }
        }

        // Modal functions for job selection
        let currentModalContext = null;

        function openJobSelectionModal(context, itemId) {
            currentModalContext = { context, itemId };
            const modal = new bootstrap.Modal(document.getElementById('jobSelectionModal'));
            
            // Reset form
            document.getElementById('jobSelectionForm').reset();
            document.querySelectorAll('.job-selection-section').forEach(section => {
                section.style.display = 'none';
            });
            
            modal.show();
        }

        function toggleJobSelectionType() {
            const selectedType = document.querySelector('input[name="jobSelectionType"]:checked').value;
            const templateSection = document.getElementById('templateSelection');
            const customerSection = document.getElementById('customerJobSelection');
            
            templateSection.style.display = selectedType === 'template' ? 'block' : 'none';
            customerSection.style.display = selectedType === 'customer' ? 'block' : 'none';
        }

        function loadProductSteps() {
            const productSelect = document.getElementById('modalProductSelect');
            const stepSelect = document.getElementById('modalTemplateStepSelect');
            const selectedProduct = productSelect.value;
            
            // Clear existing options
            stepSelect.innerHTML = '<option value="">Select Step...</option>';
            
            if (selectedProduct) {
                // Demo data - in real implementation, fetch from API
                const demoSteps = {
                    '1': ['Initial Assessment', 'Quality Check', 'Final Review'],
                    '2': ['Survey Setup', 'Data Collection', 'Analysis'],
                    '3': ['Schedule Maintenance', 'Perform Service', 'Follow-up'],
                    '4': ['Customer Analysis', 'Proposal Creation', 'Presentation'],
                    '5': ['Training Material Prep', 'Training Session', 'Support Follow-up']
                };
                
                const steps = demoSteps[selectedProduct] || [];
                steps.forEach((step, index) => {
                    const option = document.createElement('option');
                    option.value = `step_${index + 1}`;
                    option.textContent = step;
                    stepSelect.appendChild(option);
                });
            }
        }

        function loadCustomerJobSteps() {
            const jobSelect = document.getElementById('modalCustomerJobSelect');
            const stepSelect = document.getElementById('modalJobStepSelect');
            const selectedJob = jobSelect.value;
            
            // Clear existing options
            stepSelect.innerHTML = '<option value="">Select Step...</option>';
            
            if (selectedJob) {
                // Demo data - in real implementation, fetch from API
                const demoJobSteps = {
                    'job_123': ['Setup Phase', 'Execution Phase', 'Completion Phase'],
                    'job_456': ['Planning', 'Implementation', 'Testing', 'Deployment'],
                    'job_789': ['Analysis', 'Design', 'Development', 'Review']
                };
                
                const steps = demoJobSteps[selectedJob] || [];
                steps.forEach((step, index) => {
                    const option = document.createElement('option');
                    option.value = `job_step_${index + 1}`;
                    option.textContent = step;
                    stepSelect.appendChild(option);
                });
            }
        }

        function applyJobSelection() {
            if (!currentModalContext) return;
            
            const { context, itemId } = currentModalContext;
            const selectionType = document.querySelector('input[name="jobSelectionType"]:checked').value;
            
            let selectedJobData = {};
            let displayText = '';
            
            if (selectionType === 'template') {
                const productSelect = document.getElementById('modalProductSelect');
                const stepSelect = document.getElementById('modalTemplateStepSelect');
                
                if (productSelect.value && stepSelect.value) {
                    selectedJobData = {
                        jobType: 'template',
                        templateId: productSelect.value,
                        stepId: stepSelect.value,
                        jobId: `template_${productSelect.value}_${stepSelect.value}`
                    };
                    displayText = `${productSelect.options[productSelect.selectedIndex].text} - ${stepSelect.options[stepSelect.selectedIndex].text}`;
                }
            } else if (selectionType === 'customer') {
                const jobSelect = document.getElementById('modalCustomerJobSelect');
                const stepSelect = document.getElementById('modalJobStepSelect');
                
                if (jobSelect.value && stepSelect.value) {
                    selectedJobData = {
                        jobType: 'customer',
                        jobId: jobSelect.value,
                        stepId: stepSelect.value
                    };
                    displayText = `${jobSelect.options[jobSelect.selectedIndex].text} - ${stepSelect.options[stepSelect.selectedIndex].text}`;
                }
            }
            
            if (displayText) {
                // Update the target field based on context
                if (context === 'condition') {
                    const conditionDiv = document.getElementById(`condition-${itemId}`);
                    const selectedJobInput = conditionDiv.querySelector('.condition-selected-job');
                    selectedJobInput.value = displayText;
                    selectedJobInput.dataset.jobId = selectedJobData.jobId;
                    selectedJobInput.dataset.jobType = selectedJobData.jobType;
                    if (selectedJobData.templateId) selectedJobInput.dataset.templateId = selectedJobData.templateId;
                    if (selectedJobData.stepId) selectedJobInput.dataset.stepId = selectedJobData.stepId;
                } else if (context === 'action') {
                    const actionDiv = document.getElementById(`action-${itemId}`);
                    const selectedJobInput = actionDiv.querySelector('.action-selected-job');
                    selectedJobInput.value = displayText;
                    selectedJobInput.dataset.jobId = selectedJobData.jobId;
                    selectedJobInput.dataset.jobType = selectedJobData.jobType;
                    if (selectedJobData.templateId) selectedJobInput.dataset.templateId = selectedJobData.templateId;
                    if (selectedJobData.stepId) selectedJobInput.dataset.stepId = selectedJobData.stepId;
                }
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('jobSelectionModal'));
                modal.hide();
                
                // Update JSON preview
                updateJsonPreview();
            } else {
                alert('Please select both a job/template and a step before applying.');
            }
        }

        // Import Rule JSON Functions
        function showImportRuleModal() {
            const modal = new bootstrap.Modal(document.getElementById('importRuleModal'));
            modal.show();
        }

        function validateImportJson() {
            const jsonText = document.getElementById('importRuleJsonTextarea').value;
            const resultDiv = document.getElementById('importValidationResult');
            
            try {
                const rule = JSON.parse(jsonText);
                
                // Basic validation
                const errors = [];
                if (!rule.on) errors.push('Missing "on" trigger property');
                if (!rule.name) errors.push('Missing "name" property');
                if (!rule.actions || !Array.isArray(rule.actions)) errors.push('Missing or invalid "actions" array');
                
                if (errors.length > 0) {
                    resultDiv.className = 'alert alert-warning';
                    resultDiv.innerHTML = `<strong>Validation Warnings:</strong><ul>${errors.map(e => `<li>${e}</li>`).join('')}</ul>`;
                } else {
                    resultDiv.className = 'alert alert-success';
                    resultDiv.innerHTML = '<i class="fas fa-check"></i> JSON is valid and ready for import!';
                }
                resultDiv.classList.remove('d-none');
            } catch (error) {
                resultDiv.className = 'alert alert-danger';
                resultDiv.innerHTML = `<strong>JSON Parse Error:</strong> ${error.message}`;
                resultDiv.classList.remove('d-none');
            }
        }

        function formatImportJson() {
            const textarea = document.getElementById('importRuleJsonTextarea');
            try {
                const parsed = JSON.parse(textarea.value);
                textarea.value = JSON.stringify(parsed, null, 2);
                
                const resultDiv = document.getElementById('importValidationResult');
                resultDiv.className = 'alert alert-info';
                resultDiv.innerHTML = '<i class="fas fa-magic"></i> JSON formatted successfully!';
                resultDiv.classList.remove('d-none');
            } catch (error) {
                const resultDiv = document.getElementById('importValidationResult');
                resultDiv.className = 'alert alert-danger';
                resultDiv.innerHTML = `<strong>Cannot format invalid JSON:</strong> ${error.message}`;
                resultDiv.classList.remove('d-none');
            }
        }

        /* ============================================
           RULE IMPORT/EXPORT FUNCTIONS
           ============================================
           
           These functions handle importing JSON rules into
           the visual builder and exporting visual rules
           back to JSON format
           
           ============================================ */

        /**
         * Import a JSON rule into the visual rule builder
         * Parses JSON and populates all visual builder components
         * with comprehensive error handling and logging
         */
        function importRuleToBuilder() {
            const jsonText = document.getElementById('importRuleJsonTextarea').value;
            
            console.log('🔄 Starting rule import process...');
            console.log('📝 Raw JSON input:', jsonText.substring(0, 200) + '...');
            
            try {
                const rule = JSON.parse(jsonText);
                console.log('✅ JSON parsing successful:', rule);
                
                // Step 1: Clear existing builder state
                console.log('🧹 Clearing existing rule builder...');
                clearRuleBuilder();
                console.log('✅ Rule builder cleared');
                
                // Step 2: Import basic rule properties (name, trigger, description)
                console.log('📋 Importing basic rule properties...');
                try {
                    if (rule.name) {
                        const nameElement = document.getElementById('rule-name');
                        if (nameElement) {
                            nameElement.value = rule.name;
                            console.log(`✅ Set rule name: ${rule.name}`);
                        } else {
                            console.warn('⚠️ Rule name element not found');
                        }
                    }
                    if (rule.on) {
                        const triggerElement = document.getElementById('rule-trigger');
                        if (triggerElement) {
                            triggerElement.value = rule.on;
                            console.log(`✅ Set rule trigger: ${rule.on}`);
                        } else {
                            console.warn('⚠️ Rule trigger element not found');
                        }
                    }
                    if (rule.description) {
                        const descElement = document.getElementById('rule-description');
                        if (descElement) {
                            descElement.value = rule.description;
                            console.log(`✅ Set rule description: ${rule.description}`);
                        } else {
                            console.warn('⚠️ Rule description element not found');
                        }
                    }
                } catch (error) {
                    console.error('❌ Error setting basic properties:', error);
                    logActivity(`Import warning: Failed to set basic properties - ${error.message}`);
                }
                
                // Import conditions
                if (rule.conditions && Array.isArray(rule.conditions)) {
                    console.log(`🔧 Importing ${rule.conditions.length} conditions...`);
                    rule.conditions.forEach((condition, index) => {
                        try {
                            console.log(`📍 Processing condition ${index + 1}:`, condition);
                            addCondition();
                            console.log(`✅ Added condition container ${conditionCounter}`);
                            
                            const conditionDiv = document.querySelector('.condition-item:last-child');
                            if (!conditionDiv) {
                                throw new Error('Failed to find newly created condition div');
                            }
                            console.log(`✅ Found condition div:`, conditionDiv.id);
                            
                            // Set job context
                            if (condition.jobContext) {
                                const jobContextElement = conditionDiv.querySelector('.condition-job-context');
                                if (jobContextElement) {
                                    jobContextElement.value = condition.jobContext;
                                    console.log(`✅ Set job context: ${condition.jobContext}`);
                                    try {
                                        updateConditionFields(jobContextElement, conditionCounter);
                                        console.log(`✅ Updated condition fields for context: ${condition.jobContext}`);
                                    } catch (updateError) {
                                        console.error('❌ Error updating condition fields:', updateError);
                                    }
                                } else {
                                    console.warn('⚠️ Job context element not found in condition div');
                                }
                            }
                            
                            // Set field
                            if (condition.field) {
                                const fieldElement = conditionDiv.querySelector('.condition-field');
                                if (fieldElement) {
                                    fieldElement.value = condition.field;
                                    console.log(`✅ Set condition field: ${condition.field}`);
                                } else {
                                    console.warn('⚠️ Condition field element not found');
                                }
                            }
                            
                            // Set operator
                            if (condition.operator) {
                                const operatorElement = conditionDiv.querySelector('.condition-operator');
                                if (operatorElement) {
                                    operatorElement.value = condition.operator;
                                    console.log(`✅ Set condition operator: ${condition.operator}`);
                                } else {
                                    console.warn('⚠️ Condition operator element not found');
                                }
                            }
                            
                            // Set value
                            if (condition.value) {
                                const valueElement = conditionDiv.querySelector('.condition-value');
                                if (valueElement) {
                                    valueElement.value = condition.value;
                                    console.log(`✅ Set condition value: ${condition.value}`);
                                } else {
                                    console.warn('⚠️ Condition value element not found');
                                }
                            }
                            
                            // Set job identifier
                            if (condition.jobIdentifier) {
                                const jobValueInput = conditionDiv.querySelector('.condition-job-value-input');
                                if (jobValueInput) {
                                    jobValueInput.value = JSON.stringify(condition.jobIdentifier);
                                    console.log(`✅ Set job identifier:`, condition.jobIdentifier);
                                } else {
                                    console.warn('⚠️ Job value input element not found');
                                }
                            }
                            
                            console.log(`✅ Condition ${index + 1} imported successfully`);
                        } catch (conditionError) {
                            console.error(`❌ Error importing condition ${index + 1}:`, conditionError);
                            logActivity(`Import error: Failed to import condition ${index + 1} - ${conditionError.message}`);
                        }
                    });
                    console.log(`✅ All conditions processed`);
                }
                
                // Import validations
                if (rule.validations && Array.isArray(rule.validations)) {
                    console.log(`🔍 Importing ${rule.validations.length} validations...`);
                    rule.validations.forEach((validation, index) => {
                        try {
                            console.log(`📍 Processing validation ${index + 1}:`, validation);
                            addValidation();
                            console.log(`✅ Added validation container ${validationCounter}`);
                            
                            const validationDiv = document.querySelector('.validation-item:last-child');
                            if (!validationDiv) {
                                throw new Error('Failed to find newly created validation div');
                            }
                            console.log(`✅ Found validation div:`, validationDiv.id);
                            
                            // Set validation type
                            if (validation.type) {
                                const typeElement = validationDiv.querySelector('.validation-type');
                                if (typeElement) {
                                    typeElement.value = validation.type;
                                    console.log(`✅ Set validation type: ${validation.type}`);
                                    try {
                                        updateValidationType(typeElement, validationCounter);
                                        console.log(`✅ Updated validation type options`);
                                    } catch (updateError) {
                                        console.error('❌ Error updating validation type:', updateError);
                                    }
                                } else {
                                    console.warn('⚠️ Validation type element not found');
                                }
                            }
                            
                            // Set other validation properties with null checks
                            const validationFields = [
                                { prop: 'check', selector: '.validation-check' },
                                { prop: 'target', selector: '.validation-target' },
                                { prop: 'value', selector: '.validation-value' },
                                { prop: 'description', selector: '.validation-description' },
                                { prop: 'severity', selector: '.validation-severity' }
                            ];
                            
                            validationFields.forEach(field => {
                                if (validation[field.prop]) {
                                    const element = validationDiv.querySelector(field.selector);
                                    if (element) {
                                        element.value = validation[field.prop];
                                        console.log(`✅ Set validation ${field.prop}: ${validation[field.prop]}`);
                                    } else {
                                        console.warn(`⚠️ Validation ${field.prop} element not found (${field.selector})`);
                                    }
                                }
                            });
                            
                            // Set error message (handle both errorMessage and error properties)
                            if (validation.errorMessage || validation.error) {
                                const errorElement = validationDiv.querySelector('.validation-error');
                                if (errorElement) {
                                    errorElement.value = validation.errorMessage || validation.error;
                                    console.log(`✅ Set validation error message: ${validation.errorMessage || validation.error}`);
                                } else {
                                    console.warn('⚠️ Validation error element not found');
                                }
                            }
                            
                            console.log(`✅ Validation ${index + 1} imported successfully`);
                        } catch (validationError) {
                            console.error(`❌ Error importing validation ${index + 1}:`, validationError);
                            logActivity(`Import error: Failed to import validation ${index + 1} - ${validationError.message}`);
                        }
                    });
                    console.log(`✅ All validations processed`);
                }
                
                // Import actions
                if (rule.actions && Array.isArray(rule.actions)) {
                    console.log(`⚡ Importing ${rule.actions.length} actions...`);
                    rule.actions.forEach((action, index) => {
                        try {
                            console.log(`📍 Processing action ${index + 1}:`, action);
                            const actionType = action.type || 'updateStatus';
                            console.log(`🎯 Action type determined: ${actionType}`);
                            
                            addAction(actionType);
                            console.log(`✅ Added action container ${actionCounter}`);
                            
                            const actionDiv = document.querySelector('.action-item:last-child');
                            if (!actionDiv) {
                                throw new Error('Failed to find newly created action div');
                            }
                            console.log(`✅ Found action div:`, actionDiv.id);
                            
                            // Set common action properties with null checks
                            const commonFields = [
                                { prop: 'description', selector: '.action-description' },
                                { prop: 'value', selector: '.action-value' }
                            ];
                            
                            commonFields.forEach(field => {
                                if (action[field.prop]) {
                                    const element = actionDiv.querySelector(field.selector);
                                    if (element) {
                                        element.value = action[field.prop];
                                        console.log(`✅ Set action ${field.prop}: ${action[field.prop]}`);
                                    } else {
                                        console.warn(`⚠️ Action ${field.prop} element not found (${field.selector})`);
                                    }
                                }
                            });
                            
                            // Set target and update action fields
                            if (action.target) {
                                const targetSelect = actionDiv.querySelector('.action-target');
                                if (targetSelect) {
                                    targetSelect.value = action.target;
                                    console.log(`✅ Set action target: ${action.target}`);
                                    try {
                                        updateActionTarget(targetSelect, actionCounter);
                                        console.log(`✅ Updated action target fields`);
                                    } catch (updateError) {
                                        console.error('❌ Error updating action target:', updateError);
                                    }
                                } else {
                                    console.warn('⚠️ Action target element not found');
                                }
                            }
                            
                            // Set type-specific properties
                            console.log(`🔧 Setting type-specific properties for ${actionType}...`);
                            switch (actionType) {
                                case 'updateStatus':
                                case 'updateRelatedStatus':
                                    if (action.jobIdentifier) {
                                        const jobIdInput = actionDiv.querySelector('.action-job-identifier');
                                        if (jobIdInput) {
                                            jobIdInput.value = JSON.stringify(action.jobIdentifier);
                                            console.log(`✅ Set job identifier:`, action.jobIdentifier);
                                        } else {
                                            console.warn('⚠️ Job identifier input not found');
                                        }
                                    }
                                    break;
                                    
                                case 'updateDate':
                                    if (action.field) {
                                        const fieldInput = actionDiv.querySelector('.action-date-field');
                                        if (fieldInput) {
                                            fieldInput.value = action.field;
                                            console.log(`✅ Set date field: ${action.field}`);
                                        } else {
                                            console.warn('⚠️ Date field input not found');
                                        }
                                    }
                                    if (action.target) {
                                        const targetSelect = actionDiv.querySelector('.action-date-target');
                                        if (targetSelect) {
                                            targetSelect.value = action.target;
                                            console.log(`✅ Set date target: ${action.target}`);
                                        } else {
                                            console.warn('⚠️ Date target select not found');
                                        }
                                    }
                                    break;
                                    
                                case 'addLog':
                                    if (action.message) {
                                        const messageInput = actionDiv.querySelector('.action-message');
                                        if (messageInput) {
                                            messageInput.value = action.message;
                                            console.log(`✅ Set log message: ${action.message}`);
                                        } else {
                                            console.warn('⚠️ Log message input not found');
                                        }
                                    }
                                    if (action.level) {
                                        const levelSelect = actionDiv.querySelector('.action-level');
                                        if (levelSelect) {
                                            levelSelect.value = action.level;
                                            console.log(`✅ Set log level: ${action.level}`);
                                        } else {
                                            console.warn('⚠️ Log level select not found');
                                        }
                                    }
                                    break;
                                    
                                case 'createWorkflow':
                                    if (action.template && action.template.product_id) {
                                        const templateSelect = actionDiv.querySelector('.action-template');
                                        if (templateSelect) {
                                            templateSelect.value = action.template.product_id;
                                            console.log(`✅ Set workflow template: ${action.template.product_id}`);
                                        } else {
                                            console.warn('⚠️ Workflow template select not found');
                                        }
                                    }
                                    break;
                                    
                                default:
                                    console.log(`ℹ️ No specific handling for action type: ${actionType}`);
                            }
                            
                            console.log(`✅ Action ${index + 1} imported successfully`);
                        } catch (actionError) {
                            console.error(`❌ Error importing action ${index + 1}:`, actionError);
                            logActivity(`Import error: Failed to import action ${index + 1} - ${actionError.message}`);
                        }
                    });
                    console.log(`✅ All actions processed`);
                }
                
                console.log('🎨 Updating JSON preview...');
                try {
                    // Update the JSON preview
                    generateRuleFromBuilder();
                    console.log('✅ JSON preview updated');
                } catch (previewError) {
                    console.error('❌ Error updating JSON preview:', previewError);
                }
                
                console.log('🚪 Closing modal and switching tabs...');
                try {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('importRuleModal'));
                    if (modal) {
                        modal.hide();
                        console.log('✅ Modal closed');
                    }
                    
                    // Switch to visual builder tab
                    const visualBuilderTab = document.getElementById('visual-builder-tab');
                    if (visualBuilderTab) {
                        const tab = new bootstrap.Tab(visualBuilderTab);
                        tab.show();
                        console.log('✅ Switched to visual builder tab');
                    }
                } catch (uiError) {
                    console.error('❌ Error with UI updates:', uiError);
                }
                
                // Log the import
                const ruleName = rule.name || 'Unnamed Rule';
                logActivity(`✅ Successfully imported rule: ${ruleName}`);
                console.log(`🎉 Import completed successfully for: ${ruleName}`);
                
            } catch (error) {
                console.error('❌ Critical import error:', error);
                console.error('Stack trace:', error.stack);
                logActivity(`❌ Import failed: ${error.message}`);
                
                // More detailed error message
                let errorMessage = `Failed to import rule: ${error.message}`;
                if (error.name === 'SyntaxError') {
                    errorMessage += '\n\nThis appears to be a JSON syntax error. Please check your JSON formatting.';
                } else if (error.message.includes('querySelector')) {
                    errorMessage += '\n\nThis appears to be a DOM element error. Some form elements may be missing from the action templates.';
                }
                
                alert('❌ ' + errorMessage);
            }
        }

        function clearRuleBuilder() {
            // Clear basic fields
            document.getElementById('rule-name').value = '';
            document.getElementById('rule-trigger').value = '';
            document.getElementById('rule-description').value = '';
            
            // Clear conditions
            document.getElementById('conditions-container').innerHTML = `
                <div class="d-flex align-items-center mb-2">
                    <button class="btn btn-outline-primary btn-sm" onclick="addCondition()">
                        <i class="fas fa-plus"></i> Add Condition
                    </button>
                    <small class="text-muted ms-3">e.g., "Only run if tier > 500"</small>
                </div>
            `;
            
            // Clear validations
            document.getElementById('validations-container').innerHTML = `
                <div class="d-flex align-items-center mb-2">
                    <button class="btn btn-outline-primary btn-sm" onclick="addValidation()">
                        <i class="fas fa-plus"></i> Add Validation
                    </button>
                    <small class="text-muted ms-3">e.g., "Customer must be active"</small>
                </div>
            `;
            
            // Clear actions
            document.getElementById('actions-list').innerHTML = '';
            
            // Reset counters
            conditionCounter = 0;
            actionCounter = 0;
            validationCounter = 0;
            
            // Clear JSON preview
            document.getElementById('generated-rule-preview').textContent = 'Configure rule above to see generated JSON...';
            
            logActivity('Rule builder cleared');
        }

        /* ============================================
           RULE COPY/TRANSFER FUNCTIONS
           ============================================
           
           Functions for copying rules between the different
           interface components (visual builder, test runner,
           JSON editor) for seamless workflow
           
           ============================================ */

        /**
         * Copy rule from test runner to visual rule builder
         * Streamlined workflow for editing tested rules
         * Removes validation steps for seamless user experience
         */
        function copyRuleToVisualBuilder() {
            const ruleJson = document.getElementById('testRuleJson').value;
            
            if (!ruleJson.trim()) {
                alert('No rule JSON to copy. Please enter a rule in the JSON textarea first.');
                return;
            }
            
            // Skip validation and modal - directly import to visual builder
            document.getElementById('importRuleJsonTextarea').value = ruleJson;
            
            // Directly import the rule to the builder without confirmation
            importRuleToBuilder();
            
            logActivity('Rule copied directly to Visual Builder');
        }

        /**
         * Copy the currently generated JSON rule to the test runner
         * Enables immediate testing of the visual rule builder output
         * without manual copy/paste operations
         */
        function copyGeneratedRuleToTestRunner() {
            const generatedRuleText = document.getElementById('generated-rule-preview').textContent;
            
            if (!generatedRuleText || generatedRuleText.includes('Configure rule above')) {
                alert('No generated rule to copy. Please configure the rule builder first.');
                return;
            }
            
            try {
                // Validate it's proper JSON before copying
                JSON.parse(generatedRuleText);
                
                // Copy to test runner input field
                document.getElementById('testRuleJson').value = generatedRuleText;
                
                // Switch to test runner tab for immediate testing
                const testRunnerTab = document.getElementById('test-runner-tab');
                const tab = new bootstrap.Tab(testRunnerTab);
                tab.show();
                
                logActivity('Generated rule copied to Test Runner');
                
            } catch (error) {
                alert('❌ Cannot copy invalid generated rule: ' + error.message);
            }
        }

        /**
         * Copy the generated rule JSON to the system clipboard
         * Allows users to paste the rule into external applications
         * Uses modern clipboard API with fallback support
         */
        function copyGeneratedRuleToClipboard() {
            const generatedRuleText = document.getElementById('generated-rule-preview').textContent;
            
            if (!generatedRuleText || generatedRuleText.includes('Configure rule above')) {
                alert('No generated rule to copy. Please configure the rule builder first.');
                return;
            }
            
            try {
                // Validate it's proper JSON before copying
                JSON.parse(generatedRuleText);
                
                // Copy to clipboard using modern API with fallback
                if (navigator.clipboard) {
                    navigator.clipboard.writeText(generatedRuleText).then(() => {
                        alert('✅ Rule JSON copied to clipboard!');
                        logActivity('Generated rule copied to clipboard');
                    }).catch(err => {
                        // Fallback for older browsers
                        fallbackCopyToClipboard(generatedRuleText);
                    });
                } else {
                    // Fallback for older browsers
                    fallbackCopyToClipboard(generatedRuleText);
                }
                
            } catch (error) {
                alert('❌ Cannot copy invalid generated rule: ' + error.message);
            }
        }

        /**
         * Fallback clipboard copy function for older browsers
         * Creates a temporary textarea element for copy operations
         * when modern clipboard API is not available
         * @param {string} text - The text to copy to clipboard
         */
        function fallbackCopyToClipboard(text) {
            const textArea = document.createElement('textarea');
            textArea.value = text;
            textArea.style.position = 'fixed';
            textArea.style.top = '0';
            textArea.style.left = '0';
            textArea.style.width = '2em';
            textArea.style.height = '2em';
            textArea.style.padding = '0';
            textArea.style.border = 'none';
            textArea.style.outline = 'none';
            textArea.style.boxShadow = 'none';
            textArea.style.background = 'transparent';
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            
            try {
                const successful = document.execCommand('copy');
                if (successful) {
                    alert('✅ Rule JSON copied to clipboard!');
                    logActivity('Generated rule copied to clipboard (fallback)');
                } else {
                    alert('❌ Failed to copy to clipboard.');
                }
            } catch (err) {
                alert('❌ Failed to copy to clipboard.');
            }
            
            document.body.removeChild(textArea);
        }

        /* ============================================
           SYSTEM STATUS AND DATABASE SIMULATION
           ============================================
           
           Functions and data for simulating database
           operations and system status monitoring
           
           ============================================ */

        /**
         * Mock database data for demonstration purposes
         * In production, this would be fetched from server APIs
         * Provides realistic test data for rule execution simulation
         */
        const mockDatabaseData = {
            // Job templates represent different types of workflows
            jobTemplates: [
                { id: 1, name: 'Quality Assurance Package', type: 'quality', rules: 3, status: 'active', lastModified: '2025-09-01' },
                { id: 2, name: 'Customer Satisfaction Survey', type: 'survey', rules: 2, status: 'active', lastModified: '2025-08-30' },
                { id: 3, name: 'Maintenance Follow-up', type: 'maintenance', rules: 4, status: 'active', lastModified: '2025-08-28' },
                { id: 4, name: 'Upsell Assessment', type: 'sales', rules: 2, status: 'inactive', lastModified: '2025-08-25' },
                { id: 5, name: 'Training & Support', type: 'training', rules: 3, status: 'active', lastModified: '2025-08-22' }
            ],
            // Jobs represent actual workflow instances for customers
            jobs: [
                { id: 101, templateId: 1, customerId: 1, status: 'active', tier: 200 },
                { id: 102, templateId: 1, customerId: 2, status: 'complete', tier: 300 },
                { id: 103, templateId: 2, customerId: 1, status: 'active', tier: 150 },
                { id: 104, templateId: 3, customerId: 3, status: 'pending', tier: 120 },
                { id: 105, templateId: 5, customerId: 2, status: 'active', tier: 140 }
            ],
            // Status change rules that trigger on specific status updates
            statusRules: [
                { trigger: 'current_status:complete', count: 12, actions: ['updateDate', 'createWorkflow', 'notify'], status: 'active', lastModified: '2025-09-01' },
                { trigger: 'current_status:pending', count: 8, actions: ['updateDate', 'notify'], status: 'active', lastModified: '2025-08-30' },
                { trigger: 'current_status:active', count: 5, actions: ['updateDate'], status: 'active', lastModified: '2025-08-28' },
                { trigger: 'tier:changed', count: 3, actions: ['validate', 'notify'], status: 'warning', lastModified: '2025-08-25' }
            ],
            // Workflow automation rules for job progression
            workflowRules: [
                { type: 'completion_workflow', templates: 4, triggers: ['status:complete'], nextJobs: 'auto', status: 'active' },
                { type: 'quality_check', templates: 2, triggers: ['status:complete', 'tier:high'], nextJobs: 'specific', status: 'active' },
                { type: 'follow_up', templates: 3, triggers: ['date:target'], nextJobs: 'auto', status: 'active' }
            ],
            // Data validation rules for ensuring data integrity
            validationRules: [
                { type: 'businessRule', field: 'customer_id', check: 'customer_active', severity: 'error', usage: 15 },
                { type: 'dataIntegrity', field: 'tier', check: 'tier_valid', severity: 'error', usage: 12 },
                { type: 'security', field: 'user_id', check: 'has_permission', severity: 'critical', usage: 18 },
                { type: 'workflow', field: 'status', check: 'workflow_allows', severity: 'warning', usage: 9 }
            ],
            // Custom business logic rules
            customRules: [
                { name: 'High Priority Customer Alert', type: 'notification', trigger: 'customer:vip', target: 'all_jobs', status: 'active' },
                { name: 'Emergency Escalation', type: 'escalation', trigger: 'tier:urgent', target: 'next_job', status: 'active' },
                { name: 'Weekend Processing', type: 'scheduling', trigger: 'time:weekend', target: 'specific_jobs', status: 'inactive' }
            ]
        };

        /**
         * Initialize system status tab when first loaded
         * Sets up all the status monitoring displays and data tables
         */
        function initializeSystemStatus() {
            loadSystemOverview();
            loadStatusRules();
            loadWorkflowRules();
            loadValidationRules();
            loadCustomRules();
            updateSystemHealth();
            logActivity('System status initialized', 'info');
        }

        /**
         * Load system overview statistics and display in dashboard cards
         * Calculates and displays key metrics about the rule engine system
         */
        function loadSystemOverview() {
            try {
                // Calculate system statistics from mock data
                document.getElementById('jobTemplateCount').textContent = mockDatabaseData.jobTemplates.length;
                document.getElementById('activeJobCount').textContent = mockDatabaseData.jobs.filter(j => j.status === 'active').length;
                document.getElementById('ruleTypeCount').textContent = 
                    mockDatabaseData.statusRules.length + 
                    mockDatabaseData.workflowRules.length + 
                    mockDatabaseData.validationRules.length + 
                    mockDatabaseData.customRules.length;
                document.getElementById('validationCount').textContent = mockDatabaseData.validationRules.length;
                
                // Update last synchronization timestamp
                document.getElementById('lastSync').textContent = new Date().toLocaleTimeString();
                
                logActivity('System overview loaded successfully', 'success');
            } catch (error) {
                logActivity(`Error loading system overview: ${error.message}`, 'error');
            }
        }

        /**
         * Load and display status change rules in the status rules table
         * Shows all rules that trigger on job status changes
         */
        function loadStatusRules() {
            const tbody = document.getElementById('statusRulesTable');
            
            try {
                const rows = mockDatabaseData.statusRules.map(rule => `
                    <tr class="${rule.status === 'warning' ? 'table-warning' : ''}">
                        <td>
                            <code>${rule.trigger}</code>
                        </td>
                        <td>
                            <span class="badge bg-primary">${rule.count}</span>
                        </td>
                        <td>
                            ${rule.actions.map(action => `<span class="badge bg-secondary me-1">${action}</span>`).join('')}
                        </td>
                        <td>
                            <span class="badge bg-${rule.status === 'active' ? 'success' : 'warning'}">${rule.status}</span>
                        </td>
                        <td>
                            <small class="text-muted">${rule.lastModified}</small>
                        </td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary btn-sm" onclick="editRule('status', '${rule.trigger}')" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-outline-info btn-sm" onclick="testRule('status', '${rule.trigger}')" title="Test">
                                    <i class="fas fa-play"></i>
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" onclick="duplicateRule('status', '${rule.trigger}')" title="Duplicate">
                                    <i class="fas fa-copy"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `).join('');
                
                tbody.innerHTML = rows;
                logActivity(`Loaded ${mockDatabaseData.statusRules.length} status rules`, 'info');
            } catch (error) {
                tbody.innerHTML = `<tr><td colspan="6" class="text-center text-danger">Error loading status rules: ${error.message}</td></tr>`;
                logActivity(`Error loading status rules: ${error.message}`, 'error');
            }
        }

        /**
         * Load and display workflow automation rules
         * Shows rules that control job progression and workflow automation
         */
        function loadWorkflowRules() {
            const tbody = document.getElementById('workflowRulesTable');
            
            try {
                const rows = mockDatabaseData.workflowRules.map(rule => `
                    <tr>
                        <td>
                            <strong>${rule.type.replace('_', ' ').toUpperCase()}</strong>
                        </td>
                        <td>
                            <span class="badge bg-info">${rule.templates}</span>
                        </td>
                        <td>
                            ${rule.triggers.map(trigger => `<span class="badge bg-secondary me-1">${trigger}</span>`).join('')}
                        </td>
                        <td>
                            <span class="badge bg-${rule.nextJobs === 'auto' ? 'success' : 'warning'}">${rule.nextJobs}</span>
                        </td>
                        <td>
                            <span class="badge bg-success">${rule.status}</span>
                        </td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary btn-sm" onclick="editRule('workflow', '${rule.type}')" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-outline-info btn-sm" onclick="analyzeWorkflow('${rule.type}')" title="Analyze">
                                    <i class="fas fa-chart-line"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `).join('');
                
                tbody.innerHTML = rows;
                logActivity(`Loaded ${mockDatabaseData.workflowRules.length} workflow rules`, 'info');
            } catch (error) {
                tbody.innerHTML = `<tr><td colspan="6" class="text-center text-danger">Error loading workflow rules: ${error.message}</td></tr>`;
                logActivity(`Error loading workflow rules: ${error.message}`, 'error');
            }
        }

        /**
         * Load and display data validation rules
         * Shows rules that validate data integrity and business logic
         */
        function loadValidationRules() {
            const tbody = document.getElementById('validationRulesTable');
            
            try {
                const rows = mockDatabaseData.validationRules.map(rule => `
                    <tr>
                        <td>
                            <span class="badge bg-primary">${rule.type}</span>
                        </td>
                        <td>
                            <code>${rule.field}</code>
                        </td>
                        <td>
                            ${rule.check}
                        </td>
                        <td>
                            <span class="badge bg-${rule.severity === 'critical' ? 'danger' : rule.severity === 'error' ? 'warning' : 'info'}">${rule.severity}</span>
                        </td>
                        <td>
                            <span class="badge bg-secondary">${rule.usage}</span>
                        </td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary btn-sm" onclick="editRule('validation', '${rule.type}')" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-outline-success btn-sm" onclick="testValidation('${rule.type}')" title="Test">
                                    <i class="fas fa-check"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `).join('');
                
                tbody.innerHTML = rows;
                logActivity(`Loaded ${mockDatabaseData.validationRules.length} validation rules`, 'info');
            } catch (error) {
                tbody.innerHTML = `<tr><td colspan="6" class="text-center text-danger">Error loading validation rules: ${error.message}</td></tr>`;
                logActivity(`Error loading validation rules: ${error.message}`, 'error');
            }
        }

        /**
         * Load and display custom business logic rules
         * Shows user-defined rules for specific business scenarios
         */
        function loadCustomRules() {
            const tbody = document.getElementById('customRulesTable');
            
            try {
                const rows = mockDatabaseData.customRules.map(rule => `
                    <tr>
                        <td>
                            <strong>${rule.name}</strong>
                        </td>
                        <td>
                            <span class="badge bg-info">${rule.type}</span>
                        </td>
                        <td>
                            <code>${rule.trigger}</code>
                        </td>
                        <td>
                            ${rule.target.replace('_', ' ')}
                        </td>
                        <td>
                            <span class="badge bg-${rule.status === 'active' ? 'success' : 'secondary'}">${rule.status}</span>
                        </td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary btn-sm" onclick="editRule('custom', '${rule.name}')" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-outline-info btn-sm" onclick="testRule('custom', '${rule.name}')" title="Test">
                                    <i class="fas fa-play"></i>
                                </button>
                                <button class="btn btn-outline-${rule.status === 'active' ? 'warning' : 'success'} btn-sm" onclick="toggleRuleStatus('custom', '${rule.name}')" title="${rule.status === 'active' ? 'Disable' : 'Enable'}">
                                    <i class="fas fa-${rule.status === 'active' ? 'pause' : 'play'}"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `).join('');
                
                tbody.innerHTML = rows;
                logActivity(`Loaded ${mockDatabaseData.customRules.length} custom rules`, 'info');
            } catch (error) {
                tbody.innerHTML = `<tr><td colspan="6" class="text-center text-danger">Error loading custom rules: ${error.message}</td></tr>`;
                logActivity(`Error loading custom rules: ${error.message}`, 'error');
            }
        }

        /**
         * Update system health indicators and performance metrics
         * Simulates real-time health monitoring of the rule engine
         */
        function updateSystemHealth() {
            // Simulate random health check results (in production, these would be real API calls)
            const healthChecks = {
                jobs: Math.random() > 0.1,        // 90% healthy
                templates: Math.random() > 0.05,  // 95% healthy
                rules: Math.random() > 0.13       // 87% healthy
            };
            
            // Update visual status indicators based on health check results
            document.getElementById('jobsTableStatus').className = `badge bg-${healthChecks.jobs ? 'success' : 'danger'}`;
            document.getElementById('jobsTableStatus').textContent = healthChecks.jobs ? 'Healthy' : 'Issues';
            
            document.getElementById('templatesTableStatus').className = `badge bg-${healthChecks.templates ? 'success' : 'danger'}`;
            document.getElementById('templatesTableStatus').textContent = healthChecks.templates ? 'Healthy' : 'Issues';
            
            document.getElementById('rulesTableStatus').className = `badge bg-${healthChecks.rules ? 'success' : 'warning'}`;
            document.getElementById('rulesTableStatus').textContent = healthChecks.rules ? 'Healthy' : 'Warning';
            
            // Calculate and update overall performance score
            const performanceScore = Object.values(healthChecks).filter(Boolean).length / Object.keys(healthChecks).length;
            const performance = performanceScore > 0.9 ? 'Excellent' : performanceScore > 0.7 ? 'Good' : 'Poor';
            const performanceColor = performanceScore > 0.9 ? 'success' : performanceScore > 0.7 ? 'info' : 'warning';
            
            document.getElementById('performance').className = `badge bg-${performanceColor}`;
            document.getElementById('performance').textContent = performance;
        }

        /* ============================================
           SYSTEM MANAGEMENT AND ANALYSIS FUNCTIONS
           ============================================
           
           Functions for analyzing, validating, and managing
           the overall rule engine system health and performance
           
           ============================================ */

        /**
         * Analyze all system rules for conflicts and optimization opportunities
         * Performs comprehensive analysis of rule interactions and performance
         */
        function analyzeSystemRules() {
            logActivity('Starting comprehensive rule analysis...', 'info');
            
            // Simulate analysis process with realistic delay
            setTimeout(() => {
                const analysis = {
                    totalRules: mockDatabaseData.statusRules.length + mockDatabaseData.workflowRules.length + mockDatabaseData.validationRules.length + mockDatabaseData.customRules.length,
                    activeRules: mockDatabaseData.statusRules.filter(r => r.status === 'active').length + mockDatabaseData.customRules.filter(r => r.status === 'active').length + mockDatabaseData.workflowRules.length + mockDatabaseData.validationRules.length,
                    conflicts: Math.floor(Math.random() * 3),
                    optimizations: Math.floor(Math.random() * 5) + 2
                };
                
                logActivity(`Analysis complete: ${analysis.totalRules} total rules, ${analysis.activeRules} active, ${analysis.conflicts} conflicts found, ${analysis.optimizations} optimizations suggested`, 'success');
                
                if (analysis.conflicts > 0) {
                    logActivity(`⚠️ Found ${analysis.conflicts} potential rule conflicts that need attention`, 'warning');
                }
            }, 2000);
        }

        /**
         * Validate all rules in the system for correctness and consistency
         * Checks rule syntax, logic, and dependencies
         */
        function validateAllRules() {
            logActivity('Validating all rules...', 'info');
            
            // Simulate validation process
            let validationCount = 0;
            const totalRules = mockDatabaseData.statusRules.length + mockDatabaseData.validationRules.length + mockDatabaseData.customRules.length;
            
            const validationInterval = setInterval(() => {
                validationCount++;
                logActivity(`Validating rule ${validationCount}/${totalRules}...`, 'info');
                
                if (validationCount >= totalRules) {
                    clearInterval(validationInterval);
                    const errors = Math.floor(Math.random() * 2);
                    const warnings = Math.floor(Math.random() * 3);
                    
                    if (errors === 0 && warnings === 0) {
                        logActivity('✅ All rules validated successfully', 'success');
                    } else {
                        logActivity(`⚠️ Validation complete: ${errors} errors, ${warnings} warnings`, warnings > 0 ? 'warning' : 'error');
                    }
                }
            }, 300);
        }

        function exportRuleReport() {
            logActivity('Generating rule report...', 'info');
            
            const report = {
                generatedAt: new Date().toISOString(),
                systemStatus: {
                    jobTemplates: mockDatabaseData.jobTemplates.length,
                    activeJobs: mockDatabaseData.jobs.filter(j => j.status === 'active').length,
                    totalRules: mockDatabaseData.statusRules.length + mockDatabaseData.workflowRules.length + mockDatabaseData.validationRules.length + mockDatabaseData.customRules.length
                },
                statusRules: mockDatabaseData.statusRules,
                workflowRules: mockDatabaseData.workflowRules,
                validationRules: mockDatabaseData.validationRules,
                customRules: mockDatabaseData.customRules
            };
            
            const dataStr = JSON.stringify(report, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `rule-system-report-${new Date().toISOString().split('T')[0]}.json`;
            link.click();
            
            logActivity('Rule report exported successfully', 'success');
        }

        function refreshSystemData() {
            logActivity('Refreshing system data...', 'info');
            loadSystemOverview();
            loadStatusRules();
            loadWorkflowRules();
            loadValidationRules();
            loadCustomRules();
            updateSystemHealth();
            logActivity('System data refreshed', 'success');
        }

        function createNewRule() {
            logActivity('Redirecting to rule builder...', 'info');
            // Switch to visual builder tab
            const visualBuilderTab = document.getElementById('visual-builder-tab');
            if (visualBuilderTab) {
                const tab = new bootstrap.Tab(visualBuilderTab);
                tab.show();
                logActivity('Switched to visual rule builder', 'success');
            }
        }

        function showRuleConflicts() {
            logActivity('Analyzing rule conflicts...', 'info');
            
            setTimeout(() => {
                const conflicts = Math.floor(Math.random() * 3);
                if (conflicts === 0) {
                    logActivity('✅ No rule conflicts detected', 'success');
                } else {
                    logActivity(`⚠️ Found ${conflicts} potential rule conflicts`, 'warning');
                    // In a real implementation, this would show details about the conflicts
                }
            }, 1500);
        }

        function optimizeRules() {
            logActivity('Running rule optimization...', 'info');
            
            setTimeout(() => {
                const optimizations = Math.floor(Math.random() * 5) + 1;
                logActivity(`🚀 Optimization complete: ${optimizations} improvements suggested`, 'success');
                
                // Show some example optimizations
                const suggestions = [
                    'Combine duplicate status change rules',
                    'Optimize workflow trigger conditions',
                    'Remove unused validation rules',
                    'Consolidate similar custom rules',
                    'Improve rule execution order'
                ];
                
                for (let i = 0; i < Math.min(optimizations, suggestions.length); i++) {
                    logActivity(`💡 Suggestion ${i + 1}: ${suggestions[i]}`, 'info');
                }
            }, 2000);
        }

        // Rule management functions
        function editRule(ruleType, ruleId) {
            logActivity(`Opening editor for ${ruleType} rule: ${ruleId}`, 'info');
            // In a real implementation, this would open a modal or redirect to an editor
            alert(`Edit ${ruleType} rule: ${ruleId}\n\nThis would open the rule editor in a real implementation.`);
        }

        function testRule(ruleType, ruleId) {
            logActivity(`Testing ${ruleType} rule: ${ruleId}`, 'info');
            
            // Switch to test runner tab and populate with rule
            const testRunnerTab = document.getElementById('test-runner-tab');
            if (testRunnerTab) {
                const tab = new bootstrap.Tab(testRunnerTab);
                tab.show();
                logActivity(`Switched to test runner for ${ruleType} rule: ${ruleId}`, 'success');
            }
        }

        function duplicateRule(ruleType, ruleId) {
            logActivity(`Duplicating ${ruleType} rule: ${ruleId}`, 'info');
            // In a real implementation, this would create a copy of the rule
            alert(`Duplicate ${ruleType} rule: ${ruleId}\n\nThis would create a copy of the rule in a real implementation.`);
        }

        function toggleRuleStatus(ruleType, ruleId) {
            logActivity(`Toggling status for ${ruleType} rule: ${ruleId}`, 'info');
            
            // Find and toggle the rule status in mock data
            if (ruleType === 'custom') {
                const rule = mockDatabaseData.customRules.find(r => r.name === ruleId);
                if (rule) {
                    rule.status = rule.status === 'active' ? 'inactive' : 'active';
                    loadCustomRules(); // Refresh the table
                    logActivity(`${ruleType} rule ${ruleId} is now ${rule.status}`, 'success');
                }
            }
        }

        function analyzeWorkflow(workflowType) {
            logActivity(`Analyzing workflow: ${workflowType}`, 'info');
            
            setTimeout(() => {
                const metrics = {
                    avgExecutionTime: (Math.random() * 1000 + 100).toFixed(0),
                    successRate: (Math.random() * 20 + 80).toFixed(1),
                    totalExecutions: Math.floor(Math.random() * 1000 + 100)
                };
                
                logActivity(`📊 Workflow analysis for ${workflowType}:`, 'info');
                logActivity(`⏱️ Avg execution time: ${metrics.avgExecutionTime}ms`, 'info');
                logActivity(`✅ Success rate: ${metrics.successRate}%`, 'info');
                logActivity(`🔄 Total executions: ${metrics.totalExecutions}`, 'info');
            }, 1000);
        }

        function testValidation(validationType) {
            logActivity(`Testing validation: ${validationType}`, 'info');
            
            setTimeout(() => {
                const testResult = Math.random() > 0.2; // 80% pass rate
                if (testResult) {
                    logActivity(`✅ Validation test passed for ${validationType}`, 'success');
                } else {
                    logActivity(`❌ Validation test failed for ${validationType}`, 'error');
                }
            }, 500);
        }

        // Add event listener for system status tab activation
        document.addEventListener('DOMContentLoaded', function() {
            const systemStatusTab = document.getElementById('system-status-tab');
            if (systemStatusTab) {
                systemStatusTab.addEventListener('shown.bs.tab', function() {
                    initializeSystemStatus();
                });
            }
        });
    </script>
</body>
</html>

admin/rules-engine-demo.ejs
