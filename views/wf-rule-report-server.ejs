<%- include('partials/header', { user: locals.user }) %>

<div style="margin-top: 100px; padding: 20px;">
  <div class="container-fluid">
    
    <div class="row mb-4">
      <div class="col-12">
        <h2 class="mb-3">WF Rule Report</h2>
        <p class="text-muted">Workflow rules analysis - Jobs grouped by template with change_array details</p>
        

      </div>
    </div>

        

    <form method="get" action="/admin/wf-rule-report-server" class="row mb-3">
    <div class="col-md-2"><input type="text" class="form-control" name="jobId" value="<%= filters.jobId || '' %>" placeholder="Job ID"></div>
    <div class="col-md-2"><input type="text" class="form-control" name="productId" value="<%= filters.productId || '' %>" placeholder="Product ID"></div>
    <div class="col-md-2"><input type="text" class="form-control" name="sortOrder" value="<%= filters.sortOrder || '' %>" placeholder="Sort Order"></div>
    <div class="col-md-2"><input type="text" class="form-control" name="templateId" value="<%= filters.templateId || '' %>" placeholder="Template ID"></div>
    <div class="col-md-2"><input type="text" class="form-control" name="displayText" value="<%= filters.displayText || '' %>" placeholder="Display Text"></div>
    <div class="col-md-2"><input type="text" class="form-control" name="changeArray" value="<%= filters.changeArray || '' %>" placeholder="Change Array"></div>
    <div class="col-md-12 text-end mt-2">
        <button type="submit" class="btn btn-primary">Filter</button>
    </div>
    </form>

    <div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead class="table-dark">
        <tr>
            <th>ID</th>
            <th>Template ID</th>
            <th>Product ID</th>
            <th>Sort Order</th>
            <th>Display Text</th>
            <th>Change Array</th>
            <th>Update</th>
        </tr>
        </thead>
        <tbody id="allJobsBody">
        <% if (individualJobs && individualJobs.length > 0) { %>
            <% individualJobs.forEach(job => { %>
            <tr>
                <td><%= job.job_id %></td>
                <td><%= job.job_template_id %></td>
                <td><%= job.product_id || '' %></td>
                <td><%= job.sort_order || '' %></td>
                <td><%= job.job_name || '' %></td>
                <td><%= job.change_array || '' %></td>
                <td>
                    <button class="btn btn-sm btn-outline-primary update-btn"
                      data-template-id="<%= job.job_template_id %>"
                      data-template-ids="<%= job.job_template_id %>"
                      data-change-array="<%= encodeURIComponent(job.change_array || '') %>"
                      data-job-ids="<%= job.job_id %>">
                      Update
                    </button>
                </td>
            </tr>
            <% }); %>
        <% } else { %>
            <tr>
            <td colspan="6" class="text-center text-muted">No jobs found.</td>
            </tr>
        <% } %>
        </tbody>
    </table>
    </div>
    <button class="btn btn-danger" id="updateAllFilteredBtn">Update All Filtered</button>




  </div>
</div>

<!-- Update Change Array Modal -->
<div class="modal fade" id="updateChangeArrayModal" tabindex="-1" aria-labelledby="updateChangeArrayModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="updateChangeArrayModalLabel">Update Change Array</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="updateChangeArrayForm">
          <div class="mb-3">
            <label for="templateId" class="form-label">Job Template ID</label>
            <input type="text" class="form-control" id="templateId" readonly>
          </div>
          <div class="mb-3">
            <label for="affectedJobs" class="form-label">Affected Job IDs</label>
            <input type="text" class="form-control" id="affectedJobs" readonly>
          </div>
          <div class="mb-3">
            <label for="templateName" class="form-label">Display Text</label>
            <input type="text" class="form-control" id="templateName" placeholder="Edit display text...">
          </div>
          <div class="mb-3">
            <label for="newChangeArray" class="form-label">New Change Array</label>
            <textarea class="form-control" id="newChangeArray" rows="4" required style="font-family: monospace;" placeholder="Enter new change array value..."></textarea>
          </div>
          <div class="mb-3">
            <label class="form-label">Update Condition</label>
            <div class="form-control" style="background-color: #f8f9fa; font-family: monospace;" id="updateCondition"></div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="confirmUpdate">Update Records</button>
      </div>
    </div>
  </div>
</div>

<!-- Success Modal -->
<div class="modal fade" id="updateResultModal" tabindex="-1" aria-labelledby="updateResultModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="updateResultModalLabel">Update Result</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="updateResultMessage"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" onclick="reloadWithFilters()">Close</button>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Handle update button clicks
  document.querySelectorAll('.update-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const templateId = this.dataset.templateId;
      const templateIds = this.dataset.templateIds;
      const changeArray = decodeURIComponent(this.dataset.changeArray);
      const jobIds = this.dataset.jobIds;
      
      // Determine which template IDs to use
      let effectiveTemplateIds = templateId ? templateId : templateIds;
      
      // Populate modal
      document.getElementById('templateId').value = effectiveTemplateIds;
      document.getElementById('affectedJobs').value = jobIds;
      // document.getElementById('currentChangeArray').value = changeArray;
      // document.getElementById('newChangeArray').value = changeArray;
      // Set template name if available
      const templateName = this.closest('tr').querySelector('.fw-bold')?.textContent?.trim() || '';
      document.getElementById('templateName').value = templateName;

      // Generate appropriate WHERE condition
      let whereCondition;
      if (templateId) {
        // Single template update - use both template_id and job IDs for safety
        whereCondition = `WHERE job_template_id = ${templateId} AND id IN (${jobIds})`;
      } else if (templateIds) {
        // Multiple template update - job IDs already filtered by template, so template condition is redundant
        // Using job IDs only is more efficient and avoids duplicate template ID issues
        whereCondition = `WHERE id IN (${jobIds})`;
      } else {
        // Fallback to job IDs only
        whereCondition = `WHERE id IN (${jobIds})`;
      }

      document.getElementById('updateCondition').textContent = whereCondition;

      // Show modal
      new bootstrap.Modal(document.getElementById('updateChangeArrayModal')).show();
    });
  });
  
  // Handle update confirmation
  document.getElementById('confirmUpdate').addEventListener('click', function() {
    const templateIds = document.getElementById('templateId').value; // Can be single ID or comma-separated IDs
    const jobIds = document.getElementById('affectedJobs').value.split(',');
    const newChangeArray = document.getElementById('newChangeArray').value;
    const newTemplateName = document.getElementById('templateName').value;

    // Disable button during request
    this.disabled = true;
    this.textContent = 'Updating...';

    // Debug logging
    console.log('Update request:', {
      templateIds: templateIds,
      jobIdsCount: jobIds.length,
      newTemplateName: newTemplateName,
      payloadSize: JSON.stringify({
        templateIds: templateIds,
        jobIds: jobIds,
        newChangeArray: newChangeArray,
        newTemplateName: newTemplateName
      }).length
    });

    // Send update request
    fetch('/admin/wf-rule-report/update', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        templateIds: templateIds, // Changed from templateId to templateIds
        jobIds: jobIds,
        newChangeArray: newChangeArray,
        newTemplateName: newTemplateName
      })
    })
    .then(response => response.json())
    .then(data => {
      // Hide update modal
      bootstrap.Modal.getInstance(document.getElementById('updateChangeArrayModal')).hide();
      
      // Show result modal
      if (data.success) {
        const templateDisplay = templateIds.includes(',') ? `Template IDs: ${templateIds}` : `Template ID: ${templateIds}`;
        document.getElementById('updateResultMessage').innerHTML = 
          `<div class="alert alert-success">
            <i class="bi bi-check-circle"></i>
            Successfully updated <strong>${data.updatedCount}</strong> record(s) for ${templateDisplay}.
          </div>`;
      } else {
        document.getElementById('updateResultMessage').innerHTML = 
          `<div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle"></i>
            Error updating records: ${data.error}
          </div>`;
      }
      
      new bootstrap.Modal(document.getElementById('updateResultModal')).show();
    })
    .catch(error => {
      console.error('Update request failed:', {
        error: error,
        templateIds: templateIds,
        jobIdsCount: jobIds.length,
        errorType: error.name,
        errorMessage: error.message
      });
      
      let errorMessage = 'Network error occurred while updating records.';
      if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
        errorMessage += ' This may be due to request size limits.';
      }
      
      document.getElementById('updateResultMessage').innerHTML = 
        `<div class="alert alert-danger">
          <i class="bi bi-exclamation-triangle"></i>
          ${errorMessage}
        </div>`;
      
      bootstrap.Modal.getInstance(document.getElementById('updateChangeArrayModal')).hide();
      new bootstrap.Modal(document.getElementById('updateResultModal')).show();
    })
    .finally(() => {
      // Re-enable button
      this.disabled = false;
      this.textContent = 'Update Records';
    });
  });
});


document.getElementById('updateAllFilteredBtn').addEventListener('click', function() {
  // Use EJS-rendered data for bulk update
  const jobs = <%- JSON.stringify(individualJobs) %>;
  const filteredJobIds = jobs.map(job => job.job_id);
  const templateIds = Array.from(new Set(jobs.map(job => job.job_template_id)));
  const changeArrays = jobs.map(job => job.change_array);
  console.log('Preparing bulk update for jobs:', filteredJobIds);

  if (filteredJobIds.length === 0) {
    alert('No jobs match the current filter.');
    return;
  }
  console.log('Template IDs for bulk update:', templateIds);
  
  // Pre-fill modal fields
  document.getElementById('templateId').value = templateIds.join(',');
  console.log('Template IDs field set to:', document.getElementById('templateId').value);
  document.getElementById('affectedJobs').value = filteredJobIds.join(',');
  console.log('Affected Jobs field set to:', document.getElementById('affectedJobs').value);
  document.getElementById('templateName').value = ''; // Optional, or set if you want


  // Set update condition text
  document.getElementById('updateCondition').textContent =
    `WHERE id IN (${filteredJobIds.join(',')})`;

  // Show the modal
  console.log('Starting bulk update modal');
  new bootstrap.Modal(document.getElementById('updateChangeArrayModal')).show();
  alert('paused here');
});


function reloadWithFilters() {
  // Get the filter form
  const form = document.querySelector('form[action*="wf-rule-report-server"]');
  if (!form) {
    location.reload();
    return;
  }
  // Build query string from form inputs
  const params = Array.from(form.elements)
    .filter(el => el.name && el.value)
    .map(el => encodeURIComponent(el.name) + '=' + encodeURIComponent(el.value))
    .join('&');
  // Reload with filters
  location.href = form.action + (params ? ('?' + params) : '');
}


</script>


<%- include('partials/footer') %>
wf-rule-report.ejs
